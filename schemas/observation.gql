##
#
# Observation layer
#
# Record of what actually happened affecting the economic ecosystem.
#
#
##

union ProductionFlowItem = Process | Transfer | EconomicResource

"""
An observed economic flow, as opposed to a flow planned to happen in the future. This could reflect a change in the quantity of an economic resource. It is also defined by its behavior in relation to the economic resource (see `Action`)
"""
type EconomicEvent {
  id: ID!
  action: Action!
  inputOf: Process # or Transfer
  outputOf: Process # or Transfer
  provider: Agent
  receiver: Agent
  inScopeOf: Agent #TODO how to loosen this up to be more than Agent? (mostly it is Agents)
  affects: EconomicResource
  resourceClassifiedAs: [ResourceClassification]
  resourceConformsTo: ResourceSpecification
  observedQuantity: QuantityValue
  observedTime: TemporalEntity #TODO: define what this actually can be
  note: String
  under: Agreement
  # requestDistribution: Boolean
  ### inverse relationships and queries
  fulfills: [Fulfillment]
  satisfies: [Satisfaction]
  appreciationFor: [EconomicEvent] #TODO: might change soon
  track: [ProductionFlowItem]
  trace: [ProductionFlowItem]
  # validations: [Validation]
  # isValidated: Boolean
}

"""
A resource which is useful to people or the ecosystem.
"""
type EconomicResource {
  id: ID!
  url: String
  classifiedAs: [String]
  resourceConformsTo: ResourceSpecification
  trackingIdentifier: String
  image: String # url
  currentQuantity: QuantityValue
  note: String
  underlyingResource: EconomicResource
  contains: [EconomicResource] #TODO: containedBy and make this the inverse??
  # category: String
  currentLocation: String
  ### inverse relationships and queries
  trace: [EconomicEvent]
  track: [EconomicEvent]
  # resourceContacts: [Agent]
  # owners: [Agent]  TODO: define agent-resource relationships, if we do need them
}

"""
An activity that assigns the rights and responsibilities for an economic resource from one agent to another.
"""
type Transfer { #TODO this whole model is under review
  id: ID!
  name: String!
  # under: ExchangeAgreement TODO need to finish this definition
  plannedTime: TemporalEntity #TODO: define what this actually can be - or if it should even be here
  note: String
  ### inverse relationships
  economicEvents: [EconomicEvent]
  giveEconomicEvent: EconomicEvent
  takeEconomicEvent: EconomicEvent
  transferCommitments: [Commitment]
  giveCommitment: Commitment
  takeCommitment: Commitment
  involvedAgents: [Agent]
  trace: [EconomicEvent]
  track: [EconomicEvent]
}

"""
An activity that changes inputs into outputs.  It could transform or transport economic resource(s).
"""
type Process {
  id: ID!
  name: String!
  inScopeOf: Agent #TODO:
  plannedTime: TemporalEntity
  # started: Boolean
  finished: Boolean
  basedOn: RecipeProcess
  classifiedAs: [String]
  note: String
  # deletable: Boolean
  ### inverse relationships and queries
  inputs(action: Action): [EconomicEvent]
  outputs(action: Action): [EconomicEvent]
  unplannedEconomicEvents(action: Action): [EconomicEvent]
  committedInputs(action: Action): [Commitment]
  committedOutputs(action: Action): [Commitment]
  nextProcesses: [Process]
  previousProcesses: [Process]
  workingAgents: [Agent]
  plan: Plan
  trace: [EconomicEvent]
  track: [EconomicEvent]
}

"""
The quantity that the economic event fulfilled towards the commitment.
"""
type Fulfillment {
  id: ID!
  fulfilledBy: EconomicEvent!
  fulfills: Commitment!
  fulfilledQuantity: QuantityValue
  note: String
  under: Agreement #TODO
}


#type Validation {
#  id: ID!
#  validationDate: DateTime
# note: String
# validatedBy: Agent
#  economicEvent: EconomicEvent
#}
