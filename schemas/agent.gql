##
#
# Agent module
#
# All functionality related to the definition of autonomous agents
# (people, organizations, groups) and their relationships.
#
#
##

"""
A person or group or organization with economic agency.
"""
interface Agent {
  id: ID!
  name: String!
  # type: String
  image: URL

  note: String

  "The main place an agent is located, often an address where activities occur and mail can be sent. This is usually a mappable geographic location.  It also could be a website address, as in the case of agents who have no physical location."
  primaryLocation: String

  email: String

  ##############################################################################
  # inverse relationships and queries

  inventoriedEconomicResources(
    # category: EconomicResourceCategory,
    resourceClassification: URL,
    page: Int
  ): [EconomicResource]
  searchInventoriedEconomicResources(searchString: String): [EconomicResource]

  processes(finished: Boolean): [Process]
  searchProcesses(searchString: String, finished: Boolean): [Process]

  plans(finished: Boolean, year: Int, month: Int): [Plan]
  searchPlans(searchString: String, finished: Boolean): [Plan]

  economicEvents(action: ID, year: Int, month: Int): [EconomicEvent]

  commitments(action: ID, finished: Boolean): [Commitment]
  searchCommitments(searchString: String, finished: Boolean): [Commitment]

  relationships(roleId: ID, category: AgentRelationshipCategory): [AgentRelationship] #TODO: category
  relationshipsAsSubject(roleId: ID, category: AgentRelationshipCategory): [AgentRelationship] #TODO: category
  relationshipsAsObject(roleId: ID, category: AgentRelationshipCategory): [AgentRelationship] #TODO: category

  roles: [AgentRelationshipRole]

  recipes: [ResourceSpecification] #TODO: is this useful or even realistic?

  # memberRelationships: [AgentRelationship]

  # agentSkills: [ResourceClassification] # can get skills by more generic means... do we want this anyhow?
  # agentSkillRelationships: [AgentResourceClassification] # check this... if keep, rename

  commitmentsMatchingSkills: [Commitment]

  # validatedEventsCount(month: Int, year: Int): Int
  eventsCount(year: Int, month: Int): Int #TODO: ??
  eventHoursCount(year: Int, month: Int): Int #TODO: ??
  eventPeopleCount(year: Int, month: Int): Int #TODO: ??
}

# Variants of agents

"""
A natural person.
"""
type Person implements Agent {
  id: ID!
  name: String!
  # type: String
  image: URL
  note: String

  "The main place an agent is located, often an address where activities occur and mail can be sent. This is usually a mappable geographic location.  It also could be a website address, as in the case of agents who have no physical location."
  primaryLocation: String

  email: String

  ##############################################################################
  # inverse relationships and queries

  inventoriedEconomicResources(
    # category: EconomicResourceCategory,
    resourceClassification: URL,
    page: Int
  ): [EconomicResource]
  searchInventoriedEconomicResources(searchString: String): [EconomicResource]

  processes(finished: Boolean): [Process]
  searchProcesses(searchString: String, finished: Boolean): [Process]

  plans(finished: Boolean, year: Int, month: Int): [Plan]
  searchPlans(searchString: String, finished: Boolean): [Plan]

  economicEvents(action: ID, year: Int, month: Int): [EconomicEvent]

  commitments(action: ID, finished: Boolean): [Commitment]
  searchCommitments(searchString: String, finished: Boolean): [Commitment]

  relationships(roleId: ID, category: AgentRelationshipCategory): [AgentRelationship] #TODO: category
  relationshipsAsSubject(roleId: ID, category: AgentRelationshipCategory): [AgentRelationship] #TODO: category
  relationshipsAsObject(roleId: ID, category: AgentRelationshipCategory): [AgentRelationship] #TODO: category

  roles: [AgentRelationshipRole]

  recipes: [ResourceSpecification] #TODO: is this useful or even realistic?

  # memberRelationships: [AgentRelationship]
  # agentSkills: [ResourceClassification]
  # agentSkillRelationships: [AgentResourceClassification]

  commitmentsMatchingSkills: [Commitment]

  # validatedEventsCount(month: Int, year: Int): Int
  eventsCount(year: Int, month: Int): Int #TODO: ??
  eventHoursCount(year: Int, month: Int): Int #TODO: ??
  eventPeopleCount(year: Int, month: Int): Int #TODO: ??
}

"""
A formal or informal group, or legal organization.
"""
type Organization implements Agent {
  id: ID!
  name: String!
  # :TODO: define how people can create further typing of Organization, also might need a different name
  # type: OrganizationClassification
  image: URL
  note: String

  "The main place an agent is located, often an address where activities occur and mail can be sent. This is usually a mappable geographic location.  It also could be a website address, as in the case of agents who have no physical location."
  primaryLocation: String

  email: String

  ##############################################################################
  # inverse relationships and queries

  inventoriedEconomicResources(
    # category: EconomicResourceCategory,
    resourceClassification: URL,
    page: Int
  ): [EconomicResource]
  searchInventoriedEconomicResources(searchString: String): [EconomicResource]

  processes(finished: Boolean): [Process]
  searchProcesses(searchString: String, finished: Boolean): [Process]

  plans(finished: Boolean, year: Int, month: Int): [Plan]
  searchPlans(searchString: String, finished: Boolean): [Plan]

  economicEvents(action: ID, year: Int, month: Int): [EconomicEvent]

  commitments(action: ID, finished: Boolean): [Commitment]
  searchCommitments(searchString: String, finished: Boolean): [Commitment]

  relationships(roleId: ID, category: AgentRelationshipCategory): [AgentRelationship] #TODO: category
  relationshipsAsSubject(roleId: ID, category: AgentRelationshipCategory): [AgentRelationship] #TODO: category
  relationshipsAsObject(roleId: ID, category: AgentRelationshipCategory): [AgentRelationship] #TODO: category

  roles: [AgentRelationshipRole]

  recipes: [ResourceSpecification] #TODO: is this useful or even realistic?

  # memberRelationships: [AgentRelationship]

  commitmentsMatchingSkills: [Commitment]

  # validatedEventsCount(month: Int, year: Int): Int
  eventsCount(year: Int, month: Int): Int #TODO: ??
  eventHoursCount(year: Int, month: Int): Int #TODO: ??
  eventPeopleCount(year: Int, month: Int): Int #TODO: ??
}

# Relationships between agents

"""
An ongoing voluntary association between 2 agents of any kind.
"""
type AgentRelationship {
  id: ID!
  subject: Agent!
  object: Agent!
  relationship: AgentRelationshipRole!
  note: String
  # probably need the state (and CUD events)
}

"""
A relationship role defining the kind of association one agent can have with another.
"""
type AgentRelationshipRole {
  id: ID!
  label: String!
  inverseLabel: String
  # category: AgentRelationshipCategory #TODO: figure out
}

"""
Generalized behaviors for agent relationship roles
"""
enum AgentRelationshipCategory {  #TODO how do we want to do this concept?
  LEGALPARTNER
  MEMBER
  PART
  PEER
  TRADINGPARTNER
}
