##
#
# Agent module
#
# All functionality related to the definition of autonomous agents
# (people, organizations, groups) and their relationships.
#
#
##

"Query parameters for reading `EconomicResource`s related to an `Agent`"
input agentResourceSearchParams {
  searchString: String
  resourceClassification: URL
  page: Int
}

"Query parameters for reading `Process`es related to an `Agent`"
input agentProcessSearchParams {
  searchString: String
  finished: Boolean
}

"Query parameters for reading `Plan`s related to an `Agent`"
input agentPlanSearchParams {
  searchString: String
  finished: Boolean
  year: Int
  month: Int
}

"Query parameters for reading `EconomicEvent`s related to an `Agent`"
input agentEventSearchParams {
  searchString: String
  action: ID
  year: Int
  month: Int
}

"Query parameters for reading `Commitment`s related to an `Agent`"
input agentCommitmentSearchParams {
  searchString: String
  action: ID
  finished: Boolean
}

"""
A person or group or organization with economic agency.
"""
interface Agent {
  id: ID!

  "The name that this agent will be referred to by."
  name: String!

  "A 'profile image' for this agent."
  image: URL

  "Optional email address contact for this agent."
  email: String

  "The main place an agent is located, often an address where activities occur and mail can be sent. This is usually a mappable geographic location.  It also could be a website address, as in the case of agents who have no physical location."
  primaryLocation: String

  note: String

  ##############################################################################
  # inverse relationships and queries

  inventoriedEconomicResources(filter: agentResourceSearchParams): [EconomicResource]
  economicEvents(filter: agentEventSearchParams): [EconomicEvent]
  processes(filter: agentProcessSearchParams): [Process]
  commitments(filter: agentCommitmentSearchParams): [Commitment]
  plans(filter: agentPlanSearchParams): [Plan]

  relationships(roleId: ID): [AgentRelationship] # :TODO: category filtering
  relationshipsAsSubject(roleId: ID): [AgentRelationship] # :TODO: category filtering
  relationshipsAsObject(roleId: ID): [AgentRelationship] # :TODO: category filtering

  roles: [AgentRelationshipRole]

  recipes: [ResourceSpecification] #TODO: is this useful or even realistic?

  # memberRelationships: [AgentRelationship]

  # agentSkills: [ResourceClassification] # can get skills by more generic means... do we want this anyhow?
  # agentSkillRelationships: [AgentResourceClassification] # check this... if keep, rename

  commitmentsMatchingSkills: [Commitment]

  # validatedEventsCount(month: Int, year: Int): Int
  eventsCount(year: Int, month: Int): Int #TODO: ??
  eventHoursCount(year: Int, month: Int): Int #TODO: ??
  eventPeopleCount(year: Int, month: Int): Int #TODO: ??
}

# Variants of agents

"""
A natural person.
"""
type Person implements Agent {
  id: ID!

  "The name that this agent will be referred to by."
  name: String!

  "A 'profile image' for this agent."
  image: URL

  "Optional email address contact for this agent."
  email: String

  "The main place an agent is located, often an address where activities occur and mail can be sent. This is usually a mappable geographic location.  It also could be a website address, as in the case of agents who have no physical location."
  primaryLocation: String

  note: String

  ##############################################################################
  # inverse relationships and queries

  inventoriedEconomicResources(filter: agentResourceSearchParams): [EconomicResource]
  economicEvents(filter: agentEventSearchParams): [EconomicEvent]
  processes(filter: agentProcessSearchParams): [Process]
  commitments(filter: agentCommitmentSearchParams): [Commitment]
  plans(filter: agentPlanSearchParams): [Plan]

  relationships(roleId: ID): [AgentRelationship] # :TODO: category filtering
  relationshipsAsSubject(roleId: ID): [AgentRelationship] # :TODO: category filtering
  relationshipsAsObject(roleId: ID): [AgentRelationship] # :TODO: category filtering

  roles: [AgentRelationshipRole]

  recipes: [ResourceSpecification] #TODO: is this useful or even realistic?

  # memberRelationships: [AgentRelationship]
  # agentSkills: [ResourceClassification]
  # agentSkillRelationships: [AgentResourceClassification]

  commitmentsMatchingSkills: [Commitment]

  # validatedEventsCount(month: Int, year: Int): Int
  eventsCount(year: Int, month: Int): Int #TODO: ??
  eventHoursCount(year: Int, month: Int): Int #TODO: ??
  eventPeopleCount(year: Int, month: Int): Int #TODO: ??
}

"""
A formal or informal group, or legal organization.
"""
type Organization implements Agent {
  id: ID!

  # :TODO: define how people can create further typing of Organization, also might need a different name
  # type: OrganizationClassification

  "The name that this agent will be referred to by."
  name: String!

  "A 'profile image' for this agent."
  image: URL

  "Optional email address contact for this agent."
  email: String

  "The main place an agent is located, often an address where activities occur and mail can be sent. This is usually a mappable geographic location.  It also could be a website address, as in the case of agents who have no physical location."
  primaryLocation: String

  note: String

  ##############################################################################
  # inverse relationships and queries

  inventoriedEconomicResources(filter: agentResourceSearchParams): [EconomicResource]
  economicEvents(filter: agentEventSearchParams): [EconomicEvent]
  processes(filter: agentProcessSearchParams): [Process]
  commitments(filter: agentCommitmentSearchParams): [Commitment]
  plans(filter: agentPlanSearchParams): [Plan]

  relationships(roleId: ID): [AgentRelationship] # :TODO: category filtering
  relationshipsAsSubject(roleId: ID): [AgentRelationship] # :TODO: category filtering
  relationshipsAsObject(roleId: ID): [AgentRelationship] # :TODO: category filtering

  roles: [AgentRelationshipRole]

  recipes: [ResourceSpecification] #TODO: is this useful or even realistic?

  # memberRelationships: [AgentRelationship]

  commitmentsMatchingSkills: [Commitment]

  # validatedEventsCount(month: Int, year: Int): Int
  eventsCount(year: Int, month: Int): Int #TODO: ??
  eventHoursCount(year: Int, month: Int): Int #TODO: ??
  eventPeopleCount(year: Int, month: Int): Int #TODO: ??
}

# Relationships between agents

"""
An ongoing voluntary association between 2 agents of any kind.
"""
type AgentRelationship {
  id: ID!
  subject: Agent!
  object: Agent!
  relationship: AgentRelationshipRole!
  note: String
}

"""
A relationship role defining the kind of association one agent can have with another.
"""
type AgentRelationshipRole {
  id: ID!
  label: String!
  inverseLabel: String

  # :TODO: https://github.com/valueflows/valueflows/issues/494
  # classifiedAs: [URL]
}

# :TODO: how do we want to do this concept? (see AgentRelationshipRole.classifiedAs)
# """
# Generalized behaviors for agent relationship roles
# """
# enum AgentRelationshipCategory {
#   LEGALPARTNER
#   MEMBER
#   PART
#   PEER
#   TRADINGPARTNER
# }
