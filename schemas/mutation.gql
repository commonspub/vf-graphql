##
#
# System mutations entrypoint
#
#
##

type Mutation {

  # Agent module

  createPerson(name: String!, primaryPhone: String, image: String, note: String, email: String, primaryLocation: String): CreatePerson
  updatePerson(name: String, image: String, email: String, note: String, id: String!, primaryLocation: String): UpdatePerson
  deletePerson(id: String!): DeletePerson

  createOrganization(name: String!, primaryPhone: String, image: String, note: String, type: String, email: String, primaryLocation: String): CreateOrganization
  updateOrganization(name: String, image: String, email: String, note: String, id: String!, primaryLocation: String): UpdateOrganization
  deleteOrganization(id: String!): DeleteOrganization

  createAgentRelationship(note: String, subjectId: String!, relationshipId: String!, objectId: String!): CreateAgentRelationship
  updateAgentRelationship(subjectId: String, objectId: String, note: String, relationshipId: String, id: String!): UpdateAgentRelationship

  # Observation layer

  createEconomicEvent(providerId: String, resourceImage: String, resourceClassifiedAs: String, observedNumericValue: String!, note: String, observedTime: TemporalEntity!, resourceTrackingIdentifier: String, receiverId: String, inputOfId: String, observedUnitId: String!, inScopeOfId: String, outputOfId: String, createResource: Boolean, affectsId: String, resourceNote: String, resourceCurrentLocation: String, action: Action, resourceUrl: String): CreateEconomicEvent
  updateEconomicEvent(receiverId: String, affectedNumericValue: String, inputOfId: String, observedUnitId: String, affectsId: String, providerId: String, note: String, observedTime: TemporalEntity, inScopeOfId: String, action: Action, outputOfId: String, resourceClassifiedAs: String, id: String!): UpdateEconomicEvent
  deleteEconomicEvent(id: String!): DeleteEconomicEvent

  createFulfillment(fulfilledBy: EconomicEvent!, fulfills: Commitment!, fulfilledQuantity: QuantityValue, note: String, under: Agreement): CreateFulfillment
  updateFulfillment(id: String!, fulfilledBy: EconomicEvent, fulfills: Commitment, fulfilledQuantity: QuantityValue, note: String, under: Agreement): UpdateFulfillment
  deleteFulfillment(id: String!): DeleteFulfillment

  updateEconomicResource(trackingIdentifier: String, url: String, image: String, classifiedAsId: String, note: String, currentLocationId: String, id: String!): UpdateEconomicResource
  deleteEconomicResource(id: String!): DeleteEconomicResource

  #createValidation(note: String, economicEventId: String!, validatedById: String!): CreateValidation
  #deleteValidation(id: String!): DeleteValidation

  createProcess(plannedDuration: TemporalEntity, planId: String, name: String!, note: String, inScopeOfId: String): CreateProcess
  updateProcess(plannedDuration: TemporalEntity, planId: String, name: String, note: String, inScopeOfId: String, finished: Boolean, id: String!): UpdateProcess
  deleteProcess(id: String!): DeleteProcess

  # Planning layer

  createIntent(receiverId: String, intendedNumericValue: String, planId: String, intendedUnitId: String, inputOfId: String, providerId: String, intendedTime: TemporalEntity, note: String, image: String, inScopeOfId: String, involvesId: String, action: Action, outputOfId: String, resourceClassifiedAs: String, resourceConformsToId: String, underId: String): CreateIntent
  updateIntent(receiverId: String, intendedNumericValue: String, planId: String, inputOfId: String, intendedUnitId: String, resourceClassifiedAs: String, resourceConformsToId: String, providerId: String, intendedTime: TemporalEntity, note: String, inScopeOfId: String, involvesId: String, action: Action, finished: Boolean, outputOfId: String, id: String!): UpdateIntent
  deleteIntent(id: String!): DeleteIntent

  createCommitment(receiverId: String, committedNumericValue: String!, planId: String, isPlanDeliverable: Boolean, committedUnitId: String!, inputOfId: String, providerId: String, committedTime: TemporalEntity!, note: String, inScopeOfId: String, involvesId: String, action: Action!, outputOfId: String, resourceClassifiedAs: String): CreateCommitment
  updateCommitment(receiverId: String, committedNumericValue: String, inputOfId: String, committedUnitId: String, resourceClassifiedAsId: String, providerId: String, committedTime: TemporalEntity, note: String, inScopeOfId: String, involvesId: String, committedOn: String, action: Action, finished: Boolean, outputOfId: String, id: String!): UpdateCommitment
  deleteCommitment(id: String!): DeleteCommitment

  createSatisfaction(satisfiedBy: Commitment!, satisfies: Intent!, satisfiedQuantity: QuantityValue, note: String):CreateSatisfaction
  updateSatisfaction(id: String!, satisfiedBy: Commitment, satisfies: Intent, satisfiedQuantity: QuantityValue, note: String):UpdateSatisfaction # TODO: add EconomicEvent
  deleteSatisfaction(id: String!): DeleteSatisfaction

  createPlan(note: String, name: String!, plannedTime: TemporalEntity!): CreatePlan
  createPlanFromRecipe(note: String, producesResourceClassificationId: String!, name: String!, plannedTime: TemporalEntity!): CreatePlanFromRecipe
  updatePlan(note: String, id: String!, name: String, plannedTime: TemporalEntity): UpdatePlan
  deletePlan(id: String!): DeletePlan

  createExchangeAgreement(name: String, agreedTime: TemporalEntity): CreateExchangeAgreement
  updateExchangeAgreement(id: String!, name: String, agreedTime: TemporalEntity): UpdateExchangeAgreement
  deleteExchangeAgreement(id: String!): DeleteExchangeAgreement

  # Knowledge layer

  #createAgentResourceClassification(resourceClassificationId: String!, agentId: String!): CreateAgentResourceClassification
  #deleteAgentResourceClassification(id: String!): DeleteAgentResourceClassification

  createResourceSpecification(name: String!, unit: Unit, substitutable: Boolean, image: String, note: String, resourceClassifiedAs: String): CreateResourceSpecification
  updateResourceSpecification(id: String!, name: String, unit: Unit, substitutable: Boolean, image: String, note: String, resourceClassifiedAs: String): UpdateResourceSpecification
  deleteResourceSpecification(id: String!): DeleteResourceSpecification

  updateRecipeProcess(name: String!, note: String, inScopeOf: Agent, duration: TemporalDuration, durationMultiplier: Float, processClassifiedAs: String): CreateRecipeProcess
  createRecipeProcess(id: String!, name: String, note: String, inScopeOf: Agent, duration: TemporalDuration, durationMultiplier: Float, processClassifiedAs: String): UpdateRecipeProcess
  deleteRecipeProcess(id: String!): DeleteRecipeProcess

  createRecipeFlow(note: String, definedQuantity: QuantityValue!, resourceConformsTo: ResourceSpecification!, resourceClassifiedAs: String, action: Action!, recipeInputOf: RecipeProcess, recipeOutputOf: RecipeProcess): CreateRecipeFlow
  updateRecipeFlow(id: String!, note: String, definedQuantity: QuantityValue, resourceConformsTo: ResourceSpecification, resourceClassifiedAs: String, action: Action, recipeInputOf: RecipeProcess, recipeOutputOf: RecipeProcess): UpdateRecipeFlow
  deleteRecipeFlow(id: String!): DeleteRecipeFlow

  createAgentRelationshipRole(label: String!, inverseLabel: String): CreateAgentRelationshipRole
  updateAgentRelationshipRole(id: String!, label: String, inverseLabel: String): UpdateAgentRelationshipRole
  deleteAgentRelationshipRole(id: String!): DeleteAgentRelationshipRole
}



# CREATE mutation responses

type CreateAgentRelationship {
  agentRelationship: AgentRelationship
}

#type CreateAgentResourceClassification {
#  agentResourceClassification: AgentResourceClassification
#}

type CreateCommitment {
  commitment: Commitment
}

type CreateIntent {
  commitment: Intent
}

type CreateEconomicEvent {
  economicEvent: EconomicEvent
}

type CreateOrganization {
  organization: Organization
}

type CreatePerson {
  person: Person
}

type CreatePlan {
  plan: Plan
}

type CreatePlanFromRecipe {
  plan: Plan
}

type CreateProcess {
  process: Process
}

#type CreateValidation {
#  validation: Validation
#}

type createResourceSpecification {
  resourceSpecification: ResourceSpecification
}


# UPDATE mutation responses

type UpdateAgentRelationship {
  agentRelationship: AgentRelationship
}

type UpdateCommitment {
  commitment: Commitment
}

type UpdateIntent {
  commitment: Intent
}

type UpdateEconomicEvent {
  economicEvent: EconomicEvent
}

type UpdateEconomicResource {
  economicResource: EconomicResource
}

type UpdateOrganization {
  organization: Organization
}

type UpdatePerson {
  person: Person
}

type UpdatePlan {
  plan: Plan
}

type UpdateProcess {
  process: Process
}


# DELETE mutation responses

type DeleteAgentResourceClassification {
  agentResourceClassification: AgentResourceClassification
}

type DeleteCommitment {
  commitment: Commitment
}

type DeleteEconomicEvent {
  economicEvent: EconomicEvent
}

type DeleteEconomicResource {
  economicResource: EconomicResource
}

type DeleteOrganization {
  organization: Organization
}

type DeletePerson {
  person: Person
}

type DeletePlan {
  plan: Plan
}

type DeleteProcess {
  process: Process
}

#type DeleteValidation {
#  validation: Validation
#}
