##
#
# System mutations entrypoint
#
##


# Generic parameters

interface UpdateParams {
  id: ID!
}




################################################################################
# Agent layer                                                                  #
################################################################################

interface AgentParams {
  name: String
  image: String
  email: String
  primaryLocation: String
  note: String
}


interface PersonParams {
  primaryPhone: String
}

type PersonCreateParams implements PersonParams & AgentParams {
  primaryPhone: String
  name: String!
  image: String
  email: String
  primaryLocation: String
  note: String
}

type PersonUpdateParams implements UpdateParams & PersonParams & AgentParams {
  id: ID!
  primaryPhone: String
  name: String
  image: String
  email: String
  primaryLocation: String
  note: String
}

type PersonResponse {
  agent: Person!
}


interface OrganizationParams {
  primaryPhone: String
  type: String
}

type OrganizationCreateParams implements OrganizationParams & AgentParams {
  primaryPhone: String
  type: String
  name: String!
  image: String
  email: String
  primaryLocation: String
  note: String
}

type OrganizationUpdateParams implements UpdateParams & OrganizationParams & AgentParams {
  id: ID!
  primaryPhone: String
  type: String
  name: String
  image: String
  email: String
  primaryLocation: String
  note: String
}

type OrganizationResponse {
  agent: Organization!
}


interface AgentRelationshipParams {
  subjectId: ID
  objectId: ID
  relationshipId: ID
  note: String
}

type AgentRelationshipCreateParams implements AgentRelationshipParams {
  subjectId: ID!
  objectId: ID!
  relationshipId: ID!
  note: String
}

type AgentRelationshipUpdateParams implements UpdateParams & AgentRelationshipParams {
  id: ID!
  subjectId: ID
  objectId: ID
  relationshipId: ID
  note: String
}

type AgentRelationshipResponse {
  agentRelationship: AgentRelationship!
}






################################################################################
# Observation layer                                                            #
################################################################################

interface EconomicEventParams {
  action: ID!
  inputOfId: ID
  outputOfId: ID
  providerId: ID
  receiverId: ID
  inScopeOfId: ID
  affectsId: ID
  observedQuantity: IQuantityValue
  observedTime: DateTime
  note: String
}

type EconomicEventCreateParams implements EconomicEventParams {
  action: ID!
  inputOfId: ID
  outputOfId: ID
  providerId: ID
  receiverId: ID
  inScopeOfId: ID
  affectsId: ID
  observedQuantity: IQuantityValue
  observedTime: DateTime
  note: String
}

type EconomicEventUpdateParams implements UpdateParams & EconomicEventParams {
  id: ID!
  action: ID
  inputOfId: ID
  outputOfId: ID
  providerId: ID
  receiverId: ID
  inScopeOfId: ID
  affectsId: ID
  observedQuantity: IQuantityValue
  observedTime: DateTime
  note: String
}

type EconomicEventResponse {
  event: EconomicEvent!
  resource: EconomicResource # only for resource creation events
}


"""
Input `EconomicResource` type used when sending events to setup initial resource recordings
"""
interface EconomicResourceParams {
  url: String
  classifiedAs: [String]
  resourceConformsTo: ID # ResourceSpecification
  trackingIdentifier: String
  image: String # url
  currentQuantity: IQuantityValue
  currentLocation: String
  note: String
}

type EconomicResourceCreateParams implements EconomicResourceParams {
  url: String
  classifiedAs: [String]
  resourceConformsTo: ID # ResourceSpecification
  trackingIdentifier: String
  image: String # url
  currentQuantity: IQuantityValue
  currentLocation: String
  note: String
}

type EconomicResourceUpdateParams implements UpdateParams & EconomicResourceParams {
  id: ID!,
  url: String
  classifiedAs: [String]
  resourceConformsTo: ID # ResourceSpecification
  trackingIdentifier: String
  image: String # url
  currentQuantity: IQuantityValue
  currentLocation: String
  note: String
}

type EconomicResourceResponse {
  resource: EconomicResource!
}


interface FulfillmentParams {
  fulfilledBy: ID # EconomicEvent
  fulfills: ID # Commmitment
  fulfilledQuantity: IQuantityValue
  under: ID  # ExchangeAgreement
  note: String
}

type FulfillmentCreateParams implements FulfillmentParams {
  fulfilledBy: ID!
  fulfills: ID!
  fulfilledQuantity: IQuantityValue
  under: ID
  note: String
}

type FulfillmentUpdateParams implements UpdateParams & FulfillmentParams {
  id: ID!
  fulfilledBy: ID
  fulfills: ID
  fulfilledQuantity: IQuantityValue
  under: ID
  note: String
}

type FulfillmentResponse {
  fulfillment: Fulfillment
}


interface ProcessParams {
  name: String
  plannedDuration: DateInterval
  planId: String
  inScopeOfId: String
  note: String
}

type ProcessCreateParams implements ProcessParams {
  name: String!
  plannedDuration: DateInterval
  planId: String
  inScopeOfId: String
  note: String
}

type ProcessUpdateParams implements UpdateParams & ProcessParams {
  id: ID!
  name: String
  plannedDuration: DateInterval
  planId: String
  inScopeOfId: String
  finished: Boolean
  note: String
}

type ProcessResponse {
  process: Process
}






################################################################################
# Planning layer                                                               #
################################################################################


"""
Represents an intent to record the existence of a particular type of resource
at a future point in time.
"""
input IResourceIntention {
  classifiedAs: String
  conformsTo: ID # ResourceSpecification
}

interface IntentParams {
  action: ID
  inputOfId: ID
  outputOfId: ID
  providerId: ID
  receiverId: ID
  inScopeOfId: ID
  involvesId: ID
  underId: ID
  planId: ID
  intendedResource: IResourceIntention
  intendedQuantity: IQuantityValue
  intendedTime: DateTime
  image: String
  note: String
}

type IntentCreateParams implements IntentParams {
  action: ID!
  inputOfId: ID
  outputOfId: ID
  providerId: ID
  receiverId: ID
  inScopeOfId: ID
  involvesId: ID
  underId: ID
  planId: ID
  intendedResource: IResourceIntention
  intendedQuantity: IQuantityValue
  intendedTime: DateTime
  image: String
  note: String
}

type IntentUpdateParams implements UpdateParams & IntentParams {
  id: ID!
  action: ID
  inputOfId: ID
  outputOfId: ID
  providerId: ID
  receiverId: ID
  inScopeOfId: ID
  involvesId: ID
  underId: ID
  planId: ID
  intendedResource: IResourceIntention
  intendedQuantity: IQuantityValue
  intendedTime: DateTime
  image: String
  finished: Boolean
  note: String
}

type IntentCreateResponse {
  intent: Intent!
  # :TODO: should this return a simulated copy of the resource that would be
  # created, or just the fields needed to create it? (aka IResourceIntention)
  createResourceIntent: EconomicResource
}

type IntentResponse {
  intent: Intent!
}


interface CommitmentParams {
  action: ID
  committedQuantity: IQuantityValue
  committedTime: DateTime
  inputOfId: ID
  outputOfId: ID
  providerId: ID
  receiverId: ID
  inScopeOfId: ID
  involvesId: ID
  planId: ID
  isPlanDeliverable: Boolean # :TODO: does this go here, or in `Plan`?
  underId: ID
  note: String
}

type CommitmentCreateParams implements CommitmentParams {
  action: ID!
  committedQuantity: IQuantityValue!
  committedTime: DateTime!
  inputOfId: ID
  outputOfId: ID
  providerId: ID
  receiverId: ID
  inScopeOfId: ID
  involvesId: ID
  planId: ID
  isPlanDeliverable: Boolean # :TODO: does this go here, or in `Plan`?
  underId: ID
  note: String
}

type CommitmentUpdateParams implements UpdateParams & CommitmentParams {
  id: ID!
  action: ID
  # committedOn: String,  # :TODO: unsure if this is a real field, or errata from Valuenetwork
  committedQuantity: IQuantityValue
  committedTime: DateTime
  inputOfId: ID
  outputOfId: ID
  providerId: ID
  receiverId: ID
  inScopeOfId: ID
  involvesId: ID
  planId: ID
  isPlanDeliverable: Boolean # :TODO: does this go here, or in `Plan`?
  underId: ID
  finished: Boolean
  note: String
}

type CommitmentResponse {
  commitment: Commitment
}


interface SatisfactionParams {
  satisfies: Intent
  satisfiedBy: Commitment
  satisfiedQuantity: QuantityValue
  note: String
}

type SatisfactionCreateParams implements SatisfactionParams {
  satisfies: Intent!
  satisfiedBy: Commitment!
  satisfiedQuantity: QuantityValue
  note: String
}

type SatisfactionUpdateParams implements UpdateParams & SatisfactionParams {
  id: ID!
  satisfies: Intent!
  satisfiedBy: Commitment!
  satisfiedQuantity: QuantityValue
  note: String
}

type SatisfactionResponse {
  satisfaction: Satisfaction
}


# interface PlanParams {

# }

# type PlanCreateParams implements PlanParams {

# }

# type PlanUpdateParams implements UpdateParams & PlanParams {

# }

# type PlanResponse {
#   plan: Plan
# }


interface ExchangeAgreementParams {
  name: String
  agreedTime: DateTime
}

type ExchangeAgreementCreateParams implements ExchangeAgreementParams {
  name: String!
  agreedTime: DateTime!
}

type ExchangeAgreementUpdateParams implements UpdateParams & ExchangeAgreementParams {
  id: ID!
  name: String
  agreedTime: DateTime
}

type ExchangeAgreementResponse {
  exchangeAgreement: ExchangeAgreement
}






################################################################################
# Knowledge layer
################################################################################


interface ResourceSpecificationParams {
  name: String
  unit: ID
  substitutable: Boolean
  image: String
  resourceClassifiedAs: String
  note: String
}

type ResourceSpecificationCreateParams implements ResourceSpecificationParams {
  name: String!
  unit: ID
  substitutable: Boolean
  image: String
  resourceClassifiedAs: String
  note: String
}

type ResourceSpecificationUpdateParams implements UpdateParams & ResourceSpecificationParams {
  id: ID!
  name: String
  unit: ID
  substitutable: Boolean
  image: String
  resourceClassifiedAs: String
  note: String
}

type ResourceSpecificationResponse {
  resourceSpecification: ResourceSpecification
}


interface RecipeProcessParams {
  name: String
  inScopeOf: Agent
  duration: DateInterval
  durationMultiplier: Float
  processClassifiedAs: String
  note: String
}

type RecipeProcessCreateParams implements RecipeProcessParams {
  name: String!
  inScopeOf: Agent
  duration: DateInterval
  durationMultiplier: Float
  processClassifiedAs: String
  note: String
}

type RecipeProcessUpdateParams implements UpdateParams & RecipeProcessParams {
  id: ID!
  name: String
  inScopeOf: Agent
  duration: DateInterval
  durationMultiplier: Float
  processClassifiedAs: String
  note: String
}

type RecipeProcessResponse {
  recipeProcess: RecipeProcess
}


interface RecipeFlowParams {
  action: Action
  definedQuantity: IQuantityValue
  resourceConformsTo: ResourceSpecification
  resourceClassifiedAs: String
  recipeInputOf: RecipeProcess
  recipeOutputOf: RecipeProcess
  note: String
}

type RecipeFlowCreateParams implements RecipeFlowParams {
  action: Action!
  definedQuantity: QuantityValue!
  resourceConformsTo: ResourceSpecification!
  resourceClassifiedAs: String
  recipeInputOf: RecipeProcess
  recipeOutputOf: RecipeProcess
  note: String
}

type RecipeFlowUpdateParams implements UpdateParams & RecipeFlowParams {
  id: ID!
  action: Action
  definedQuantity: IQuantityValue
  resourceConformsTo: ResourceSpecification
  resourceClassifiedAs: String
  recipeInputOf: RecipeProcess
  recipeOutputOf: RecipeProcess
  note: String
}

type RecipeFlowResponse {
  recipeFlow: RecipeFlow
}


interface AgentRelationshipRoleParams {
  label: String
  inverseLabel: String
}

type AgentRelationshipRoleCreateParams implements AgentRelationshipRoleParams {
  label: String!
  inverseLabel: String
}

type AgentRelationshipRoleUpdateParams implements UpdateParams & AgentRelationshipRoleParams {
  id: ID!
  label: String
  inverseLabel: String
}

type AgentRelationshipRoleResponse {
  agentRelationshipRole: AgentRelationshipRole
}









################################################################################
# MAIN MUTATIONS ENTRYPOINT                                                    #
################################################################################

type Mutation {

  # Agent module

  createPerson(person: PersonCreateParams!): PersonResponse
  updatePerson(person: PersonUpdateParams!): PersonResponse
  deletePerson(id: String!): PersonResponse

  createOrganization(organization: OrganizationCreateParams!): OrganizationResponse
  updateOrganization(organization: OrganizationUpdateParams!): OrganizationResponse
  deleteOrganization(id: String!): OrganizationResponse

  createAgentRelationship(relationship: AgentRelationshipCreateParams!): AgentRelationshipResponse
  updateAgentRelationship(relationship: AgentRelationshipUpdateParams!): AgentRelationshipResponse
  deleteAgentRelationship(id: String!): AgentRelationshipResponse

  # Observation layer

  createEconomicEvent(event: EconomicEventCreateParams!, createResource: EconomicResourceCreateParams): EconomicEventResponse
  updateEconomicEvent(event: EconomicEventUpdateParams!): EconomicEventResponse
  deleteEconomicEvent(id: String!): EconomicEventResponse

  createFulfillment(fulfillment: FulfillmentCreateParams!): FulfillmentResponse
  updateFulfillment(fulfillment: FulfillmentUpdateParams!): FulfillmentResponse
  deleteFulfillment(id: String!): FulfillmentResponse

  # :TODO: should this be allowed without an originating event? Or should the event be recorded transparently?
  updateEconomicResource(resource: EconomicResourceUpdateParams!): EconomicResourceResponse
  deleteEconomicResource(id: String!): EconomicResourceResponse

  #createValidation(note: String, economicEventId: String!, validatedById: String!): CreateValidation
  #deleteValidation(id: String!): DeleteValidation

  createProcess(process: ProcessCreateParams!): ProcessResponse
  updateProcess(process: ProcessUpdateParams!): ProcessResponse
  deleteProcess(id: String!): ProcessResponse

  # Planning layer

  createIntent(intent: IntentCreateParams): IntentCreateResponse
  updateIntent(intent: IntentUpdateParams): IntentResponse
  deleteIntent(id: String!): IntentResponse

  createCommitment(commitment: CommitmentCreateParams): CommitmentResponse
  updateCommitment(commitment: CommitmentUpdateParams): CommitmentResponse
  deleteCommitment(id: String!): CommitmentResponse

  createSatisfaction(satisfaction: SatisfactionCreateParams): SatisfactionResponse
  updateSatisfaction(satisfaction: SatisfactionUpdateParams): SatisfactionResponse # TODO: add EconomicEvent
  deleteSatisfaction(id: String!): SatisfactionResponse

  # :TODO: @see planning.gql
  # createPlan(): PlanResponse
  # createPlanFromRecipe(): PlanResponse
  # updatePlan(): PlanResponse
  # deletePlan(id: String!): PlanResponse

  createExchangeAgreement(exchangeAgreement: ExchangeAgreementCreateParams): ExchangeAgreementResponse
  updateExchangeAgreement(exchangeAgreement: ExchangeAgreementUpdateParams): ExchangeAgreementResponse
  deleteExchangeAgreement(id: String!): ExchangeAgreementResponse

  # Knowledge layer

  createAgentRelationshipRole(agentRelationshipRole: AgentRelationshipRoleCreateParams): AgentRelationshipRoleResponse
  updateAgentRelationshipRole(agentRelationshipRole: AgentRelationshipRoleUpdateParams): AgentRelationshipRoleResponse
  deleteAgentRelationshipRole(id: String!): AgentRelationshipRoleResponse

  #createAgentResourceClassification(resourceClassificationId: String!, agentId: String!): CreateAgentResourceClassification
  #deleteAgentResourceClassification(id: String!): DeleteAgentResourceClassification

  createResourceSpecification(resourceSpecification: ResourceSpecificationCreateParams): ResourceSpecificationResponse
  updateResourceSpecification(resourceSpecification: ResourceSpecificationUpdateParams): ResourceSpecificationResponse
  deleteResourceSpecification(id: String!): ResourceSpecificationResponse

  createRecipeProcess(recipeProcess: RecipeProcessCreateParams): RecipeProcessResponse
  updateRecipeProcess(recipeProcess: RecipeProcessUpdateParams): RecipeProcessResponse
  deleteRecipeProcess(id: String!): RecipeProcessResponse

  createRecipeFlow(recipeFlow: RecipeFlowCreateParams): RecipeFlowResponse
  updateRecipeFlow(recipeFlow: RecipeFlowUpdateParams): RecipeFlowResponse
  deleteRecipeFlow(id: String!): RecipeFlowResponse
}
