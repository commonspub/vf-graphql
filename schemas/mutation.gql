##
#
# System mutations entrypoint
#
# @package  HoloREA
# @author   pospi <pospi@spadgos.com>
# @since    2019-02-11
#
##

type Mutation {

  # Agent module
  createPerson(name: String!, primaryPhone: String, image: String, note: String, type: String, email: String, primaryLocationId: Int): CreatePerson
  updatePerson(name: String, image: String, email: String, note: String, id: Int!, primaryLocationId: Int): UpdatePerson
  deletePerson(id: Int!): DeletePerson

  createOrganization(name: String!, primaryPhone: String, image: String, note: String, type: String!, email: String, primaryLocationId: Int): CreateOrganization
  updateOrganization(name: String, image: String, email: String, note: String, id: Int!, primaryLocationId: Int): UpdateOrganization
  deleteOrganization(id: Int!): DeleteOrganization

  createAgentRelationship(note: String, subjectId: Int!, relationshipId: Int!, objectId: Int!): CreateAgentRelationship
  updateAgentRelationship(subjectId: Int, objectId: Int, note: String, relationshipId: Int, id: Int!): UpdateAgentRelationship

  # Observation layer
  createEconomicEvent(providerId: Int, resourceImage: String, affectedResourceClassifiedAsId: Int, affectedNumericValue: String!, note: String, start: String, requestDistribution: Boolean, resourceTrackingIdentifier: String, receiverId: Int, inputOfId: Int, affectedUnitId: Int, scopeId: Int, outputOfId: Int, createResource: Boolean, url: String, affectsId: Int, resourceNote: String, resourceCurrentLocationId: Int, action: Action, resourceUrl: String, fulfillsCommitmentId: Int): CreateEconomicEvent
  updateEconomicEvent(receiverId: Int, fulfillsCommitmentId: Int, affectedNumericValue: String, inputOfId: Int, url: String, affectedUnitId: Int, affectsId: Int, providerId: Int, note: String, start: String, scopeId: Int, action: Action, requestDistribution: Boolean, outputOfId: Int, affectedResourceClassifiedAsId: Int, id: Int!): UpdateEconomicEvent
  deleteEconomicEvent(id: Int!): DeleteEconomicEvent

  updateEconomicResource(trackingIdentifier: String, url: String, image: String, resourceClassifiedAsId: Int, note: String, currentLocationId: Int, id: Int!): UpdateEconomicResource
  deleteEconomicResource(id: Int!): DeleteEconomicResource

  createValidation(note: String, economicEventId: Int!, validatedById: Int!): CreateValidation
  deleteValidation(id: Int!): DeleteValidation

  createProcess(plannedFinish: String!, planId: Int!, name: String!, plannedStart: String!, note: String, scopeId: Int!): CreateProcess
  updateProcess(plannedFinish: String, planId: Int, name: String, plannedStart: String, note: String, scopeId: Int, isFinished: Boolean, id: Int!): UpdateProcess
  deleteProcess(id: Int!): DeleteProcess

  # Planning layer
  createCommitment(receiverId: Int, committedNumericValue: String!, planId: Int, isPlanDeliverable: Boolean, committedUnitId: Int!, inputOfId: Int, providerId: Int, plannedStart: String, due: String!, note: String, url: String, scopeId: Int, involvesId: Int, action: Action!, outputOfId: Int, committedResourceClassifiedAsId: Int!): CreateCommitment
  updateCommitment(receiverId: Int, committedNumericValue: String, inputOfId: Int, committedUnitId: Int, committedResourceClassifiedAsId: Int, providerId: Int, plannedStart: String, due: String, note: String, url: String, scopeId: Int, involvesId: Int, committedOn: String, action: Action, isFinished: Boolean, outputOfId: Int, id: Int!): UpdateCommitment
  deleteCommitment(id: Int!): DeleteCommitment

  createPlan(note: String, name: String!, due: String!): CreatePlan
  createPlanFromRecipe(note: String, producesResourceClassificationId: Int!, name: String!, due: String!): CreatePlanFromRecipe
  updatePlan(note: String, id: Int!, name: String, due: String): UpdatePlan
  deletePlan(id: Int!): DeletePlan

  # Knowledge layer
  createAgentResourceClassification(resourceClassificationId: Int!, agentId: Int!): CreateAgentResourceClassification
  deleteAgentResourceClassification(id: Int!): DeleteAgentResourceClassification

}



# CREATE mutation responses

type CreateAgentRelationship {
  agentRelationship: AgentRelationship
}

type CreateAgentResourceClassification {
  agentResourceClassification: AgentResourceClassification
}

type CreateCommitment {
  commitment: Commitment
}

type CreateEconomicEvent {
  economicEvent: EconomicEvent
}

type CreateOrganization {
  organization: Organization
}

type CreatePerson {
  person: Person
}

type CreatePlan {
  plan: Plan
}

type CreatePlanFromRecipe {
  plan: Plan
}

type CreateProcess {
  process: Process
}

type CreateValidation {
  validation: Validation
}



# UPDATE mutation responses

type UpdateAgentRelationship {
  agentRelationship: AgentRelationship
}

type UpdateCommitment {
  commitment: Commitment
}

type UpdateEconomicEvent {
  economicEvent: EconomicEvent
}

type UpdateEconomicResource {
  economicResource: EconomicResource
}

type UpdateOrganization {
  organization: Organization
}

type UpdatePerson {
  person: Person
}

type UpdatePlan {
  plan: Plan
}

type UpdateProcess {
  process: Process
}



# DELETE mutation responses

type DeleteAgentResourceClassification {
  agentResourceClassification: AgentResourceClassification
}

type DeleteCommitment {
  commitment: Commitment
}

type DeleteEconomicEvent {
  economicEvent: EconomicEvent
}

type DeleteEconomicResource {
  economicResource: EconomicResource
}

type DeleteOrganization {
  organization: Organization
}

type DeletePerson {
  person: Person
}

type DeletePlan {
  plan: Plan
}

type DeleteProcess {
  process: Process
}

type DeleteValidation {
  validation: Validation
}
