##
#
# System mutations entrypoint
#
#
##

type Mutation {

  # Agent module

  createPerson(
    name: String!,
    primaryPhone: String,
    image: String,
    note: String,
    email: String,
    primaryLocation: String
  ): CreatePerson
  updatePerson(
    id: ID!,
    name: String,
    image: String,
    email: String,
    note: String,
    primaryLocation: String
  ): UpdatePerson
  deletePerson(id: String!): DeletePerson

  createOrganization(
    name: String!,
    primaryPhone: String,
    image: String,
    note: String,
    type: String,
    email: String,
    primaryLocation: String
  ): CreateOrganization
  updateOrganization(
    id: ID!,
    name: String,
    image: String,
    email: String,
    note: String,
    primaryLocation: String
  ): UpdateOrganization
  deleteOrganization(id: String!): DeleteOrganization

  createAgentRelationship(
    subjectId: String!,
    objectId: String!,
    relationshipId: String!,
    note: String
  ): CreateAgentRelationship
  updateAgentRelationship(
    id: ID!,
    subjectId: String,
    objectId: String,
    note: String,
    relationshipId: String
  ): UpdateAgentRelationship
  deleteAgentRelationship(id: String!): DeleteAgentRelationship

  # Observation layer

  createEconomicEvent(
    inputOfId: String,
    outputOfId: String,
    providerId: String,
    receiverId: String,
    inScopeOfId: String,
    affectsId: String,
      observedNumericValue: String!,
      observedUnitId: String!,
      observedTime: TemporalEntity!,
    createResource: Boolean,
      resourceTrackingIdentifier: String,
      resourceNote: String,
      resourceCurrentLocation: String,
      resourceUrl: String,
      resourceClassifiedAs: String,
      resourceImage: String,
    action: Action,
    note: String
  ): CreateEconomicEvent
  updateEconomicEvent(
    id: ID!,
    inputOfId: String,
    outputOfId: String,
    providerId: String,
    receiverId: String,
    inScopeOfId: String,
    affectsId: String,
      affectedNumericValue: String,
      observedUnitId: String,
      observedTime: TemporalEntity,
    resourceClassifiedAs: String, # :TODO: should we be able to update created resources via this method, or would that be done with updateEconomicResource?
    action: Action,
    note: String
  ): UpdateEconomicEvent
  deleteEconomicEvent(id: String!): DeleteEconomicEvent

  createFulfillment(
    fulfilledBy: EconomicEvent!,
    fulfills: Commitment!,
    fulfilledQuantity: QuantityValue,
    under: Agreement,
    note: String
  ): CreateFulfillment
  updateFulfillment(
    id: ID!,
    fulfilledBy: EconomicEvent,
    fulfills: Commitment,
    fulfilledQuantity: QuantityValue,
    under: Agreement,
    note: String
  ): UpdateFulfillment
  deleteFulfillment(id: String!): DeleteFulfillment

  updateEconomicResource(
    id: ID!,
    trackingIdentifier: String,
    url: String,
    image: String,
    classifiedAsId: String,
    currentLocationId: String,
    note: String
  ): UpdateEconomicResource
  deleteEconomicResource(id: String!): DeleteEconomicResource

  #createValidation(note: String, economicEventId: String!, validatedById: String!): CreateValidation
  #deleteValidation(id: String!): DeleteValidation

  createProcess(
    plannedDuration: TemporalEntity,
    planId: String,
    name: String!,
    inScopeOfId: String,
    note: String
  ): CreateProcess
  updateProcess(
    id: ID!,
    plannedDuration: TemporalEntity,
    planId: String,
    name: String,
    inScopeOfId: String,
    finished: Boolean,
    note: String
  ): UpdateProcess
  deleteProcess(id: String!): DeleteProcess

  # Planning layer

  createIntent(
    inputOfId: String,
    outputOfId: String,
    providerId: String,
    receiverId: String,
    inScopeOfId: String,
    involvesId: String,
    underId: String,
    planId: String,
      intendedNumericValue: String,
      intendedUnitId: String,
      intendedTime: TemporalEntity,
    image: String,
    action: Action,
      resourceClassifiedAs: String,
      resourceConformsToId: String,
    note: String
  ): CreateIntent
  updateIntent(
    id: ID!,
    inputOfId: String,
    outputOfId: String,
    providerId: String,
    receiverId: String,
    inScopeOfId: String,
    involvesId: String,
    planId: String,
      intendedNumericValue: String,
      intendedUnitId: String,
      intendedTime: TemporalEntity,
      resourceClassifiedAs: String,
      resourceConformsToId: String,
    action: Action,
    finished: Boolean,
    note: String
  ): UpdateIntent
  deleteIntent(id: String!): DeleteIntent

  createCommitment(
    inputOfId: String,
    outputOfId: String,
    providerId: String,
    receiverId: String,
    inScopeOfId: String,
    involvesId: String,
    planId: String,
    isPlanDeliverable: Boolean,
      committedNumericValue: String!,
      committedUnitId: String!,
      committedTime: TemporalEntity!,
    action: Action!,
      resourceClassifiedAs: String,
    note: String
  ): CreateCommitment
  updateCommitment(
    id: ID!,
    inputOfId: String,
    outputOfId: String,
    providerId: String,
    receiverId: String,
    inScopeOfId: String,
    involvesId: String,
      committedOn: String,
      committedTime: TemporalEntity,
      committedNumericValue: String,
      committedUnitId: String,
    action: Action,
      resourceClassifiedAsId: String,
    finished: Boolean,
    note: String
  ): UpdateCommitment
  deleteCommitment(id: String!): DeleteCommitment

  createSatisfaction(
    satisfies: Intent!,
    satisfiedBy: Commitment!,
    satisfiedQuantity: QuantityValue,
    note: String
  ):CreateSatisfaction
  updateSatisfaction(
    id: ID!,
    satisfies: Intent,
    satisfiedBy: Commitment,
    satisfiedQuantity: QuantityValue,
    note: String
  ):UpdateSatisfaction # TODO: add EconomicEvent
  deleteSatisfaction(id: String!): DeleteSatisfaction

  createPlan(
    name: String!,
    plannedTime: TemporalEntity!,
    note: String
  ): CreatePlan
  createPlanFromRecipe(
    name: String!,
    plannedTime: TemporalEntity!
    producesResourceClassificationId: String!,
    note: String
  ): CreatePlanFromRecipe
  updatePlan(
    id: ID!,
    name: String,
    plannedTime: TemporalEntity,
    note: String
  ): UpdatePlan
  deletePlan(id: String!): DeletePlan

  createExchangeAgreement(
    name: String,
    agreedTime: TemporalEntity
  ): CreateExchangeAgreement
  updateExchangeAgreement(
    id: ID!,
    name: String,
    agreedTime: TemporalEntity
  ): UpdateExchangeAgreement
  deleteExchangeAgreement(id: String!): DeleteExchangeAgreement

  # Knowledge layer

  #createAgentResourceClassification(resourceClassificationId: String!, agentId: String!): CreateAgentResourceClassification
  #deleteAgentResourceClassification(id: String!): DeleteAgentResourceClassification

  createResourceSpecification(
    name: String!,
    unit: Unit,
    substitutable: Boolean,
    image: String,
    resourceClassifiedAs: String,
    note: String
  ): CreateResourceSpecification
  updateResourceSpecification(
    id: ID!,
    name: String,
    unit: Unit,
    substitutable: Boolean,
    image: String,
    resourceClassifiedAs: String,
    note: String
  ): UpdateResourceSpecification
  deleteResourceSpecification(id: String!): DeleteResourceSpecification

  updateRecipeProcess(
    name: String!,
    inScopeOf: Agent,
    duration: TemporalDuration,
    durationMultiplier: Float,
    processClassifiedAs: String,
    note: String
  ): CreateRecipeProcess
  createRecipeProcess(
    id: ID!,
    name: String,
    inScopeOf: Agent,
    duration: TemporalDuration,
    durationMultiplier: Float,
    processClassifiedAs: String,
    note: String
  ): UpdateRecipeProcess
  deleteRecipeProcess(id: String!): DeleteRecipeProcess

  createRecipeFlow(
    note: String,
    definedQuantity: QuantityValue!,
    resourceConformsTo: ResourceSpecification!,
    resourceClassifiedAs: String,
    action: Action!,
    recipeInputOf: RecipeProcess,
    recipeOutputOf: RecipeProcess
  ): CreateRecipeFlow
  updateRecipeFlow(
    id: ID!,
    note: String,
    definedQuantity: QuantityValue,
    resourceConformsTo: ResourceSpecification,
    resourceClassifiedAs: String,
    action: Action,
    recipeInputOf: RecipeProcess,
    recipeOutputOf: RecipeProcess
  ): UpdateRecipeFlow
  deleteRecipeFlow(id: String!): DeleteRecipeFlow

  createAgentRelationshipRole(
    label: String!,
    inverseLabel: String
  ): CreateAgentRelationshipRole
  updateAgentRelationshipRole(
    id: ID!,
    label: String,
    inverseLabel: String
  ): UpdateAgentRelationshipRole
  deleteAgentRelationshipRole(id: String!): DeleteAgentRelationshipRole
}



# CREATE mutation responses

type CreateAgentRelationship {
  agentRelationship: AgentRelationship
}

#type CreateAgentResourceClassification {
#  agentResourceClassification: AgentResourceClassification
#}

type CreateCommitment {
  commitment: Commitment
}

type CreateIntent {
  commitment: Intent
}

type CreateEconomicEvent {
  economicEvent: EconomicEvent
}

type CreateOrganization {
  organization: Organization
}

type CreatePerson {
  person: Person
}

type CreatePlan {
  plan: Plan
}

type CreatePlanFromRecipe {
  plan: Plan
}

type CreateProcess {
  process: Process
}

#type CreateValidation {
#  validation: Validation
#}

type createResourceSpecification {
  resourceSpecification: ResourceSpecification
}


# UPDATE mutation responses

type UpdateAgentRelationship {
  agentRelationship: AgentRelationship
}

type UpdateCommitment {
  commitment: Commitment
}

type UpdateIntent {
  commitment: Intent
}

type UpdateEconomicEvent {
  economicEvent: EconomicEvent
}

type UpdateEconomicResource {
  economicResource: EconomicResource
}

type UpdateOrganization {
  organization: Organization
}

type UpdatePerson {
  person: Person
}

type UpdatePlan {
  plan: Plan
}

type UpdateProcess {
  process: Process
}


# DELETE mutation responses

type DeleteAgentRelationship {
  agentRelationship: AgentRelationship
}

type DeleteAgentResourceClassification {
  agentResourceClassification: AgentResourceClassification
}

type DeleteCommitment {
  commitment: Commitment
}

type DeleteEconomicEvent {
  economicEvent: EconomicEvent
}

type DeleteEconomicResource {
  economicResource: EconomicResource
}

type DeleteOrganization {
  organization: Organization
}

type DeletePerson {
  person: Person
}

type DeletePlan {
  plan: Plan
}

type DeleteProcess {
  process: Process
}

#type DeleteValidation {
#  validation: Validation
#}
