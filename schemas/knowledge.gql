##
#
# Knowledge layer
#
# Provides functionality for classifying and organising other parts of the system, including recipes.
#
# :TODO: need to figure out a way of making these enums extensible while
#        still validating implementations
#
##


"""
An action verb defining the kind of event, commitment, or intent.
"""
type Action {
  id: ID!
  name: String!
  resourceEffect: String! # "+", "-", "0"
}

# Defined action names: #TODO: how to do this list?  enum?
# unload
# load
# consume
# use
# work
# cite
# produce
# accept
# improve
# give
# receive
# raise
# lower

"""
Specification of a kind of resource. Could define a material item, service, digital item, currency account, etc.
Used instead of a classification when more information is needed, particularly for recipes.
"""
type ResourceSpecification {
  id: ID!
  name: String!
  unit: Unit
  substitutable: Boolean
  image: String
  note: String
  # category: String #TODO
  # processCategory: String #TODO
  resourceClassifiedAs: [String]
  ### inverse relationships
  conformingResources: [EconomicResource]
}

"""
Specifies the process part of a recipe for use in planning from recipe.
"""
type RecipeProcess {
  id: ID!
  name: String!
  note: String
  inScopeOf: Agent
  duration: TemporalDuration #TODO: ??
  durationMultiplier: Float
  processClassifiedAs: [String]
}

"""
The linkage between a recipe process, an action that structures a recipe, and a resource specification.
"""
type RecipeFlow {
  id: ID!
  note: String
  definedQuantity: QuantityValue
  resourceConformsTo: ResourceSpecification
  resourceClassifiedAs: String # url
  action: Action!
  recipeInputOf: RecipeProcess
  recipeOutputOf: RecipeProcess
}

# """
# Types of `EconomicResource`s
# """
# enum EconomicResourceCategory { #TODO: need better list, if we keep this
#   NONE
#   CURRENCY
#   INVENTORY
#   WORK
# }

# """
# Used to filter `EconomicResource`s in flow definition
# """
# enum EconomicResourceProcessCategory { #TODO: need better list if we keep this, and better name
#   NONE
#   CITED
#   CONSUMED
#   PRODUCED
#   USED
# }

# """
# Classifies the skill resources that `Agent`s may offer.
# """
# type AgentResourceClassification { #TODO: do we want something like this? if so, is this the best model?
#   id: ID!
#   agent: Agent
#   resourceClassification: ResourceClassification
#   action: Action
# }

# """
# Classification for declaring types of `Organisation`s.
# """
# type OrganizationClassification { #TODO: name? recommended model?
#   id: ID!
#   name: String!
#   note: String
# }

# Faceted classification (handled by resourceClassifiedBy probably in VF) TODO: want to define?  probably not for VF

# type Facet {
#   id: ID!
#   name: String!
#   description: String
#   facetValues: [FacetValue]
# }

# type FacetValue {
#   id: ID!
#   value: String!
#   description: String
#   facet: [Facet]
# }
