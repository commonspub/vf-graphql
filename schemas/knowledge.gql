##
#
# Knowledge layer
#
# Provides functionality for classifying and organising other parts of the system, including recipes.
#
# :TODO: need to figure out a way of making these enums extensible while
#        still validating implementations
#
# @package  HoloREA
# @since    2019-02-11
#
##

# Classifications system

"""
An action verb defining the kind of event, commitment, or intent.
"""
#enum Action {
#  NONE
#  ACCEPT
#  ADJUST
#  CITE
#  CONSUME
#  GIVE
#  IMPROVE
#  PRODUCE
#  TAKE
#  USE
#  WORK
#}
type Action {
  id: ID!
  name: String!
  resourceEffect: String! # "+", "-", "0"
}

"""
Types of `EconomicResource`s
"""
enum EconomicResourceCategory { # need better list, if we keep this
  NONE
  CURRENCY
  INVENTORY
  WORK
}

"""
Specification of a kind of resource. Could define a material item, service, digital item, currency account, etc.
Used instead of a classification when more information is needed, particularly for recipes.
"""
type ResourceSpecification {
  id: ID!
  name: String!
  unit: Unit
  image: String
  note: String
  category: String #TODO
  processCategory: String #TODO
  resourceClassifiedAs: [String]
  classificationResources: [EconomicResource]
}

"""
Used to filter `EconomicResource`s in flow definition
"""
enum EconomicResourceProcessCategory { # need better list if we keep this, and better name
  NONE
  CITED
  CONSUMED
  PRODUCED
  USED
}

"""
Classification for declaring types of `Process`es.
"""
type RecipeProcess {
  id: ID!
  name: String!
  note: String
  scope: Agent
  estimatedDuration: String
}

"""
Association behaviors between different `Agent`s
"""
enum AgentRelationshipCategory {
  LEGALPARTNER
  MEMBER
  PART
  PEER
  TRADINGPARTNER
}

"""
Classifies the skill resources that `Agent`s may offer.
"""
type AgentResourceClassification { # TODO: do we want something like this?
  id: ID!
  agent: Agent
  resourceClassification: ResourceClassification
  action: Action
}

"""
Classification for declaring types of `Organisation`s.
"""
type OrganizationClassification { #TODO: name?
  id: ID!
  name: String!
  note: String
}

# Faceted classification (handled by resourceClassifiedBy probably in VF) TODO

type Facet {
  id: ID!
  name: String!
  description: String
  facetValues: [FacetValue]
}

type FacetValue {
  id: ID!
  value: String!
  description: String
  facet: [Facet]
}
