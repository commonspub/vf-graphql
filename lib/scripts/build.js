/**
 * Build script for packaging the GraphQL source files as nodejs modules
 *
 * @package: HoloREA
 * @since:   2019-05-22
 * @flow
 */

const fs = require('fs')
const path = require('path')
const globby = require('globby')

const {
  graphqlSync,
  introspectionQuery,
  buildASTSchema,
} = require('graphql')
const { mergeTypeDefs } = require('@graphql-toolkit/schema-merging')
const { fromIntrospectionQuery } = require('graphql-2-json-schema')

// template for precompiled output JS files
const TEMPLATE = `
// Generated by scripts/build.js - edit the *.gql file instead!

module.exports = \`
$SCHEMA_DOCUMENT
\`

`;

(async() => {
  const typeDefs = []

  // bundle each schema file as a nodejs module that exports a string
  for await (const filePath of globby.stream(path.resolve(__dirname, `../schemas/*.gql`))) {
    const doc = fs.readFileSync(filePath)
    const docString = doc.toString()

    fs.writeFileSync(
      path.resolve(__dirname, `../build/${path.basename(filePath, '.gql')}.js`),
      TEMPLATE.replace('$SCHEMA_DOCUMENT', docString.replace(/`/g, '\\`'))
    )

    typeDefs.push(docString)
  }

  // compile full schema by merging all parts. This also has the side effect of validating the input files.
  const schema = buildASTSchema(mergeTypeDefs(typeDefs, { throwOnConflict: true }))

  // generate & write JSON Schema version by running introspection query. Also performs runtime validation of the schema.
  const introspection = graphqlSync(schema, introspectionQuery)

  if (!introspection) {
    throw new Error('Unknown error executing introspection query. Schema may be invalid- does `npm run test` pass?')
  } else if (introspection.error) {
    throw introspection.error
  }

  fs.writeFileSync(
    path.resolve(__dirname, `../json-schema.json`),
    JSON.stringify(fromIntrospectionQuery(introspection.data), undefined, 2)
  )

  // fs.writeFileSync(
  //   path.resolve(__dirname, '../introspection-query.json'),
  //   JSON.stringify(introspection.data, undefined, 2)
  // )

  fs.copyFileSync(path.resolve(__dirname, '../../LICENSE'), path.resolve(__dirname, '../LICENSE'))
  fs.copyFileSync(path.resolve(__dirname, '../../README.md'), path.resolve(__dirname, '../README.md'))
  fs.copyFileSync(path.resolve(__dirname, '../../CHANGELOG.md'), path.resolve(__dirname, '../CHANGELOG.md'))
})()
