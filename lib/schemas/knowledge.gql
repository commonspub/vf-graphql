##
#
# Knowledge layer
#
# Provides functionality for classifying and organising other parts of the system, including recipes.
#
# :TODO: need to figure out a way of making these enums extensible while
#        still validating implementations
#
##


"""
An action verb defining the kind of event, commitment, or intent.
It is recommended that the lowercase action verb should be used as the record ID
in order that references to `Action`s elsewhere in the system are easily readable.
"""
type Action {
  id: ID!
  name: String!
  resourceEffect: String! # "+", "-", "0"
}

# Core VF action IDs & `resourceEffect`s:
# @see https://github.com/valueflows/valueflows/issues/487
#   dropoff   (+) transported resource or person leaves the process, the same resource will appear in input with vf:pickup verb
#   pickup    (-) transported resource or person enters the process, the same resource will appear in output with vf:dropoff verb
#   consume   (-) for example an ingredient composed into the output, after the process the ingredient is gone
#   use       (0) for example a tool used in process, after the process, the tool still exists
#   work      (0) labor power towards a process
#   cite      (0) for example a design file, neither used nor consumed, the file remains available at all times
#   produce   (+) new resource created in that process or an existing stock resource added to
#   accept    (0) in processes like repair or maintentance, the same resource will appear in output with vf:modify verb
#   modify    (0) in processes like repair or maintentance, the same resource will appear in input with vf:accept verb
#   pass      (0) possible output of a testing or reviewing process, indicating the resource passed, the same resource will appear in input with *vf:accept* verb
#   fail      (0) possible output of a testing or reviewing process, indicating the resource failed, the same resource will appear in input with *vf:accept* verb
#   service   (0) new service produced and delivered (being a service implies that an agent actively receives the service)
#   transfer-all-rights (-+) give full (in the human realm) rights and responsibilities to another agent, without transferring physical custody
#   transfer-custody    (-+) give physical custody and control of a resource, without full accounting or ownership rights
#   transfer-complete   (-+) give full rights and responsibilities plus physical custody
#   move      (-+) change location and/or identity of a resource with no change of agent
#   raise     (+) adjusts a quantity up based on a beginning balance or inventory count
#   lower     (-) adjusts a quantity down based on a beginning balance or inventory count

"""
Specification of a kind of resource. Could define a material item, service, digital item, currency account, etc.
Used instead of a classification when more information is needed, particularly for recipes.
"""
type ResourceSpecification {
  id: ID!
  name: String!

  "The unit of inventory expected for this resource specification, as a default."
  unitOfResource: Unit

  "The unit used for use or work actions expected for this resource specification, as a default."
  unitOfEffort: Unit

  "Defines if any resource of that type can be freely substituted for any other resource of that type when used, consumed, traded, etc."
  substitutable: Boolean

  image: URI

  note: String

  ##############################################################################
  # inverse relationships and queries

  conformingResources: [EconomicResource!]
}

"""
Specifies the resource as part of a recipe, for use in planning from recipe.
"""
type RecipeResource {
  id: ID!
  name: String!

  "The unit of inventory used for this resource in the recipe."
  unitOfResource: Unit

  "The unit used for use action on this resource or work action in the recipe."
  unitOfEffort: Unit

  image: URI

  note: String

  "References a concept in a common taxonomy or other classification scheme for purposes of categorization or grouping."
  resourceClassifiedAs: [URI!]

  "The resource definition referenced by this flow in the recipe."
  recipeFlowResource: RecipeResource

  ##############################################################################
  # inverse relationships and queries

}

"""
The linkage between a recipe process, an action that structures a recipe, and a resource specification.
"""
type RecipeFlow {
  id: ID!

  "The amount and unit of the economic resource counted or inventoried."
  resourceQuantity: QuantityValue

  "The amount and unit of the work or use or citation effort-based action. This is often a time duration, but also could be cycle counts or other measures of effort or usefulness."
  effortQuantity: QuantityValue

  "The primary resource specification or definition of an existing or potential economic resource. A resource will have only one, as this specifies exactly what the resource is."
  resourceConformsTo: ResourceSpecification

  "References a concept in a common taxonomy or other classification scheme for purposes of categorization or grouping."
  resourceClassifiedAs: [URI!]

  "The last stage the desired economic resource went through."
  stage: ProcessSpecification

  "The state of the desired economic resource (pass or fail), after coming out of a test or review process."
  state: Action

  "Relates a process input or output to a verb, such as consume, produce, work, modify, etc."
  action: Action!

  "Relates an input flow to it's node in a recipe."
  recipeInputOf: RecipeProcess

  "Relates an output flow to it's node in a recipe."
  recipeOutputOf: RecipeProcess

  note: String
}

"""
Specifies the process part of a recipe for use in planning from recipe.
"""
type RecipeProcess {
  id: ID!
  name: String!

  "The planned calendar duration of the process as defined for the recipe batch."
  hasDuration: Duration

  "The multiplier for duration based on capacities for the recipe."
  durationMultiplier: Float

  "References a concept in a common taxonomy or other classification scheme for purposes of categorization."
  processClassifiedAs: [URI!]

  "The standard specification or definition of a process."
  processConformsTo: ProcessSpecification!

  note: String
}

"""
Specifies the kind of process.
"""
type ProcessSpecification {
  id: ID!
  name: String!
  note: String
}

"""
The type definition of one or more scenarios, such as Yearly Budget.
"""
type ScenarioDefinition {
  id: ID!
  name: String!

  "The duration of the scenario, often an accounting period."
  hasDuration: Duration

  note: String
}
