##
#
# Knowledge module
#
# Provides functionality for classifying and organising other parts of the system, including recipes.
#
# @depends  measurement.gql
# @package  vf-graphql
# @since    2019-02-11
#
##


"""
An action verb defining the kind of event, commitment, or intent.
It is recommended that the lowercase action verb should be used as the record ID
in order that references to `Action`s elsewhere in the system are easily readable.
"""
type Action {
  id: ID!

  "A unique verb which defines the action."
  label: String!

  "The accounting effect of an economic event on a resource, increment, decrement, no effect, or decrement resource and increment 'to' resource."
  resourceEffect: String! # "increment", "decrement", "noEffect", "decrementIncrement"

  "The onhand effect of an economic event on a resource, increment, decrement, no effect, or decrement resource and increment 'to' resource."
  onhandEffect: String! # "increment", "decrement", "noEffect", "decrementIncrement"

  "Denotes if a process input or output, or not related to a process."
  inputOutput: String # "input", "output", "notApplicable"

  "The action that should be included on the other direction of the process, for example accept with modify."
  pairsWith: String # "notApplicable", (any of the action labels)
}

# Core VF action IDs & `resourceEffect`s:
# @see https://valueflo.ws/introduction/flows.html#actions

"""
Specification of a kind of resource. Could define a material item, service, digital item, currency account, etc.
Used instead of a classification when more information is needed, particularly for recipes.
"""
type ResourceSpecification {
  id: ID!

  "An informal or formal textual identifier for a type of resource. Does not imply uniqueness."
  name: String!

  "The uri to an image relevant to the entity, such as a photo, diagram, etc."
  image: URI

  "References a concept in a common taxonomy or other classification scheme for purposes of categorization or grouping."
  resourceClassifiedAs: [URI!]

  "A textual description or comment."
  note: String

  "The default unit used for the resource itself."
  defaultUnitOfResource: Unit

  "The default unit used for use or work."
  defaultUnitOfEffort: Unit
}

"""
Specifies the kind of process.
"""
type ProcessSpecification {
  id: ID!

  "An informal or formal textual identifier for the process. Does not imply uniqueness."
  name: String!

  "A textual description or comment."
  note: String
}



input ResourceSpecificationCreateParams {
  "An informal or formal textual identifier for a type of resource. Does not imply uniqueness."
  name: String!

  "The uri to an image relevant to the entity, such as a photo, diagram, etc."
  image: URI

  "References a concept in a common taxonomy or other classification scheme for purposes of categorization or grouping."
  resourceClassifiedAs: [URI!]

  "A textual description or comment."
  note: String

  "(`Unit`) The default unit used for the resource itself."
  defaultUnitOfResource: ID

  "(`Unit`) The default unit used for use or work."
  defaultUnitOfEffort: ID
}

input ResourceSpecificationUpdateParams {
  id: ID!

  "An informal or formal textual identifier for a type of resource. Does not imply uniqueness."
  name: String

  "The uri to an image relevant to the entity, such as a photo, diagram, etc."
  image: URI

  "References a concept in a common taxonomy or other classification scheme for purposes of categorization or grouping."
  resourceClassifiedAs: [URI!]

  "A textual description or comment."
  note: String

  "(`Unit`) The default unit used for the resource itself."
  defaultUnitOfResource: ID

  "(`Unit`) The default unit used for use or work."
  defaultUnitOfEffort: ID
}

type ResourceSpecificationResponse {
  resourceSpecification: ResourceSpecification
}



input ProcessSpecificationCreateParams {
  "An informal or formal textual identifier for the process. Does not imply uniqueness."
  name: String!

  "A textual description or comment."
  note: String
}

input ProcessSpecificationUpdateParams {
  id: ID!

  "An informal or formal textual identifier for the process. Does not imply uniqueness."
  name: String

  "A textual description or comment."
  note: String
}

type ProcessSpecificationResponse {
  processSpecification: ProcessSpecification
}



type Query {
  action(id: ID): Action
  actions: [Action!]

  resourceSpecification(id: ID): ResourceSpecification
  resourceSpecifications(start: ID, limit: Int): [ResourceSpecification!]

  processSpecification(id: ID): ProcessSpecification
  processSpecifications(start: ID, limit: Int): [ProcessSpecification!]
}

type Mutation {
  createResourceSpecification(resourceSpecification: ResourceSpecificationCreateParams): ResourceSpecificationResponse
  updateResourceSpecification(resourceSpecification: ResourceSpecificationUpdateParams): ResourceSpecificationResponse
  deleteResourceSpecification(id: ID!): Boolean

  createProcessSpecification(processSpecification: ProcessSpecificationCreateParams): ProcessSpecificationResponse
  updateProcessSpecification(processSpecification: ProcessSpecificationUpdateParams): ProcessSpecificationResponse
  deleteProcessSpecification(id: ID!): Boolean
}
