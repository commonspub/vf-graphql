##
#
# Planning layer
#
# Allows agents to coordinate economic activity by agreeing on a series of
# future events to be undertaken.
#
# :TODO: split out observation fields into bridging schema to allow planning
#        systems to operate without observed events
#
# @depends  measurement.gql
# @depends  knowledge.gql
# @depends  agent.gql
# @depends  observation.gql
# @package  vf-graphql
# @since    2019-02-11
#
##

union EventOrCommitment = EconomicEvent | Commitment

"""
A planned economic flow that has been promised by an agent to another agent.
"""
type Commitment {
  id: ID!

  "Relates a commitment to a verb, such as consume, produce, work, improve, etc."
  action: Action!

  "Defines the process to which this commitment is an input."
  inputOf: Process

  "Defines the process for which this commitment is an output."
  outputOf: Process

  "The economic agent from whom the commitment is initiated."
  provider: Agent!

  "The economic agent whom the commitment is for."
  receiver: Agent!

  "References a concept in a common taxonomy or other classification scheme for purposes of categorization or grouping."
  resourceClassifiedAs: [URI!]

  "The primary resource specification or definition of an existing or potential economic resource. A resource will have only one, as this specifies exactly what the resource is."
  resourceConformsTo: ResourceSpecification

  "Exact economic resource involved in the commitment."
  resourceInventoriedAs: EconomicResource

  "The amount and unit of the economic resource counted or inventoried."
  resourceQuantity: Measure

  "The amount and unit of the work or use or citation effort-based action. This is often a time duration, but also could be cycle counts or other measures of effort or usefulness."
  effortQuantity: Measure

  "The planned beginning of the commitment."
  hasBeginning: DateTime

  "The planned end of the commitment."
  hasEnd: DateTime

  "The planned date/time for the commitment. Can be used instead of beginning and end."
  hasPointInTime: DateTime

  "The time something is expected to be complete."
  due: DateTime

  "The creation time of the commitment."
  created: DateTime

  "The commitment is complete or not.  This is irrespective of if the original goal has been met, and indicates that no more will be done."
  finished: Boolean

  "A textual description or comment."
  note: String

  "Grouping around something to create a boundary or context, used for documenting, accounting, planning."
  inScopeOf: [AnyType!]

  "Reference to an agreement between agents which specifies the rules or policies or calculations which govern this commitment."
  agreedIn: URI

  ##############################################################################
  # inverse relationships and queries

  "The economic event which completely or partially fulfills a commitment."
  fulfilledBy: [Fulfillment!]

  "An intent satisfied fully or partially by an economic event or commitment."
  satisfies: [Satisfaction!]

  involvedAgents: [Agent!]

  "The commitment can be safely deleted, has no dependent information."
  deletable: Boolean
}

"""
A planned economic flow which has not been committed to, which can lead to economic events (sometimes through commitments).
"""
type Intent {
  id: ID!

  "An informal or formal textual identifier for an intent. Does not imply uniqueness."
  name: String

  "Relates an intent to a verb, such as consume, produce, work, improve, etc."
  action: Action!

  "Defines the process to which this intent is an input."
  inputOf: Process

  "Defines the process to which this intent is an output."
  outputOf: Process

  "The economic agent from whom the intent is initiated. This implies that the intent is an offer."
  provider: Agent

  "The economic agent whom the intent is for.  This implies that the intent is a request."
  receiver: Agent

  "References a concept in a common taxonomy or other classification scheme for purposes of categorization or grouping."
  resourceClassifiedAs: [URI!]

  "The primary resource specification or definition of an existing or potential economic resource. A resource will have only one, as this specifies exactly what the resource is."
  resourceConformsTo: ResourceSpecification

  "When a specific `EconomicResource` is known which can service the `Intent`, this defines that resource."
  resourceInventoriedAs: EconomicResource

  "The amount and unit of the economic resource counted or inventoried. This is the quantity that could be used to increment or decrement a resource, depending on the type of resource and resource effect of action."
  resourceQuantity: Measure

  "The amount and unit of the work or use or citation effort-based action. This is often a time duration, but also could be cycle counts or other measures of effort or usefulness."
  effortQuantity: Measure

  "The total quantity of the offered resource available."
  availableQuantity: Measure

  "The planned beginning of the intent."
  hasBeginning: DateTime

  "The planned end of the intent."
  hasEnd: DateTime

  "The planned date/time for the intent. Can be used instead of beginning and end."
  hasPointInTime: DateTime

  "The time something is expected to be complete."
  due: DateTime

  "The intent is complete or not.  This is irrespective of if the original goal has been met, and indicates that no more will be done."
  finished: Boolean

  "The uri to an image relevant to the intent, such as a photo."
  image: URI

  "A textual description or comment."
  note: String

  "Grouping around something to create a boundary or context, used for documenting, accounting, planning."
  inScopeOf: [AnyType!]

  "Reference to an agreement between agents which specifies the rules or policies or calculations which govern this intent."
  agreedIn: URI

  "The intent can be safely deleted, has no dependent information."
  deletable: Boolean

  ##############################################################################
  # inverse relationships and queries

  satisfiedBy: [Satisfaction!]
}

"""
Represents many-to-many relationships between commitments and economic events that fully or partially satisfy one or more commitments.
"""
type Fulfillment {
  id: ID!

  "The economic event which completely or partially fulfills a commitment."
  fulfilledBy: EconomicEvent!

  "The commitment which is completely or partially fulfilled by an economic event."
  fulfills: Commitment!

  "The amount and unit of the economic resource counted or inventoried."
  resourceQuantity: Measure

  "The amount and unit of the work or use or citation effort-based action. This is often a time duration, but also could be cycle counts or other measures of effort or usefulness."
  effortQuantity: Measure

  "A textual description or comment."
  note: String
}

"""
Represents many-to-many relationships between intents and commitments or events that partially or full satisfy one or more intents.
"""
type Satisfaction {
  id: ID!

  "An intent satisfied fully or partially by an economic event or commitment."
  satisfies: Intent!

  "A commitment or economic event fully or partially satisfying an intent."
  satisfiedBy: EventOrCommitment!

  "The amount and unit of the economic resource counted or inventoried."
  resourceQuantity: Measure

  "The amount and unit of the work or use or citation effort-based action. This is often a time duration, but also could be cycle counts or other measures of effort or usefulness."
  effortQuantity: Measure

  "A textual description or comment."
  note: String
}





# interface IntentParams {
#   name: String
#   action: ID
#   inputOf: ID
#   outputOf: ID
#   provider: ID
#   receiver: ID
#   resourceConformsTo: ID
#   resourceClassifiedAs: [URI!]
#   resourceInventoriedAs: ID
#   resourceQuantity: IMeasure
#   effortQuantity: IMeasure
#   availableQuantity: IMeasure
#   hasBeginning: DateTime
#   hasEnd: DateTime
#   hasPointInTime: DateTime
#   due: DateTime
#   image: URI
#   note: String
#   inScopeOf: [AnyType!]
#   atLocation: ID
#   agreedIn: URI
#   finished: Boolean
# }

input IntentCreateParams { # implements IntentParams
  "Relates an intent to a verb, such as consume, produce, work, improve, etc."
  action: ID!

  "An informal or formal textual identifier for an intent. Does not imply uniqueness."
  name: String

  inputOf: ID
  outputOf: ID
  provider: ID
  receiver: ID
  resourceConformsTo: ID
  resourceClassifiedAs: [URI!]
  resourceInventoriedAs: ID
  resourceQuantity: IMeasure
  effortQuantity: IMeasure
  availableQuantity: IMeasure
  hasBeginning: DateTime
  hasEnd: DateTime
  hasPointInTime: DateTime
  due: DateTime
  image: URI

  "A textual description or comment."
  note: String
  inScopeOf: [AnyType!]
  atLocation: ID # SpatialThing
  agreedIn: URI
  finished: Boolean
}

input IntentUpdateParams { # implements UpdateParams & IntentParams
  id: ID!

  "An informal or formal textual identifier for an intent. Does not imply uniqueness."
  name: String

  "Relates an intent to a verb, such as consume, produce, work, improve, etc."
  action: ID

  inputOf: ID
  outputOf: ID
  provider: ID
  receiver: ID
  resourceConformsTo: ID
  resourceClassifiedAs: [URI!]
  resourceInventoriedAs: ID
  resourceQuantity: IMeasure
  effortQuantity: IMeasure
  availableQuantity: IMeasure
  hasBeginning: DateTime
  hasEnd: DateTime
  hasPointInTime: DateTime
  due: DateTime
  image: URI
  finished: Boolean

  "A textual description or comment."
  note: String
  inScopeOf: [AnyType!]
  atLocation: ID # SpatialThing
  agreedIn: URI
}

type IntentResponse {
  intent: Intent!
}


# interface CommitmentParams {
#   action: ID
#   inputOf: ID
#   outputOf: ID
#   provider: ID
#   receiver: ID
#   resourceClassifiedAs: [URI!]
#   resourceConformsTo: ID
#   resourceInventoriedAs: ID
#   resourceQuantity: IMeasure
#   effortQuantity: IMeasure
#   hasBeginning: DateTime
#   hasEnd: DateTime
#   hasPointInTime: DateTime
#   due: DateTime
#   finished: Boolean
#   note: String
#   inScopeOf: [AnyType!]
#   independentDemandOf: ID #Plan
#   atLocation: ID
#   agreedIn: URI
#   clauseOf: Agreement
# }

input CommitmentCreateParams { # implements CommitmentParams
  "Relates a commitment to a verb, such as consume, produce, work, improve, etc."
  action: ID!

  "Defines the process to which this commitment is an input."
  inputOf: ID

  "Defines the process for which this commitment is an output."
  outputOf: ID

  "The economic agent from whom the commitment is initiated."
  provider: ID!

  "The economic agent whom the commitment is for."
  receiver: ID!

  "References a concept in a common taxonomy or other classification scheme for purposes of categorization or grouping."
  resourceClassifiedAs: [URI!]

  "The primary resource specification or definition of an existing or potential economic resource. A resource will have only one, as this specifies exactly what the resource is."
  resourceConformsTo: ID

  "Exact economic resource involved in the commitment."
  resourceInventoriedAs: ID

  "The amount and unit of the economic resource counted or inventoried."
  resourceQuantity: IMeasure

  "The amount and unit of the work or use or citation effort-based action. This is often a time duration, but also could be cycle counts or other measures of effort or usefulness."
  effortQuantity: IMeasure

  "The planned beginning of the commitment."
  hasBeginning: DateTime

  "The planned end of the commitment."
  hasEnd: DateTime

  "The planned date/time for the commitment. Can be used instead of beginning and end."
  hasPointInTime: DateTime

  "The time something is expected to be complete."
  due: DateTime

  "The commitment is complete or not.  This is irrespective of if the original goal has been met, and indicates that no more will be done."
  finished: Boolean

  "A textual description or comment."
  note: String

  "Grouping around something to create a boundary or context, used for documenting, accounting, planning."
  inScopeOf: [AnyType!]

  "Represents a desired deliverable expected from this plan."
  independentDemandOf: ID #Plan

  "The place where an commitment occurs.  Usually mappable."
  atLocation: ID # SpatialThing

  "Reference to an agreement between agents which specifies the rules or policies or calculations which govern this commitment."
  agreedIn: URI

  "This commitment is part of the agreement."
  clauseOf: ID # Agreement
}

input CommitmentUpdateParams { # implements UpdateParams & CommitmentParams
  id: ID!

  "Defines the process to which this commitment is an input."
  inputOf: ID

  "Defines the process for which this commitment is an output."
  outputOf: ID

  "The economic agent from whom the commitment is initiated."
  provider: ID

  "The economic agent whom the commitment is for."
  receiver: ID

  "References a concept in a common taxonomy or other classification scheme for purposes of categorization or grouping."
  resourceClassifiedAs: [URI!]

  "The primary resource specification or definition of an existing or potential economic resource. A resource will have only one, as this specifies exactly what the resource is."
  resourceConformsTo: ID

  "Exact economic resource involved in the commitment."
  resourceInventoriedAs: ID

  "The amount and unit of the economic resource counted or inventoried."
  resourceQuantity: IMeasure

  "The amount and unit of the work or use or citation effort-based action. This is often a time duration, but also could be cycle counts or other measures of effort or usefulness."
  effortQuantity: IMeasure

  "The planned beginning of the commitment."
  hasBeginning: DateTime

  "The planned end of the commitment."
  hasEnd: DateTime

  "The planned date/time for the commitment. Can be used instead of beginning and end."
  hasPointInTime: DateTime

  "The time something is expected to be complete."
  due: DateTime

  "The commitment is complete or not.  This is irrespective of if the original goal has been met, and indicates that no more will be done."
  finished: Boolean

  "A textual description or comment."
  note: String

  "Grouping around something to create a boundary or context, used for documenting, accounting, planning."
  inScopeOf: [AnyType!]

  "Represents a desired deliverable expected from this plan."
  independentDemandOf: ID #Plan

  "The place where an commitment occurs.  Usually mappable."
  atLocation: ID # SpatialThing

  "Reference to an agreement between agents which specifies the rules or policies or calculations which govern this commitment."
  agreedIn: URI

  "This commitment is part of the agreement."
  clauseOf: ID # Agreement
}

type CommitmentResponse {
  commitment: Commitment
}


# interface FulfillmentParams {
#   fulfilledBy: ID # EconomicEvent
#   fulfills: ID # Commmitment
#   resourceQuantity: IMeasure
#   effortQuantity: IMeasure
#   note: String
# }

input FulfillmentCreateParams { # implements FulfillmentParams
  fulfilledBy: ID!
  fulfills: ID!
  resourceQuantity: IMeasure
  effortQuantity: IMeasure

  "A textual description or comment."
  note: String
}

input FulfillmentUpdateParams { # implements UpdateParams & FulfillmentParams
  id: ID!
  fulfilledBy: ID
  fulfills: ID
  resourceQuantity: IMeasure
  effortQuantity: IMeasure

  "A textual description or comment."
  note: String
}

type FulfillmentResponse {
  fulfillment: Fulfillment
}


# interface SatisfactionParams {
#   satisfies: Intent
#   satisfiedBy: Commitment
#   resourceQuantity: IMeasure
#   effortQuantity: IMeasure
#   note: String
# }

input SatisfactionCreateParams { # implements SatisfactionParams
  satisfies: ID! # Intent
  satisfiedBy: ID! # Commitment
  resourceQuantity: IMeasure
  effortQuantity: IMeasure

  "A textual description or comment."
  note: String
}

input SatisfactionUpdateParams { # implements UpdateParams & SatisfactionParams
  id: ID!
  satisfies: ID # Intent
  satisfiedBy: ID # Commitment
  resourceQuantity: IMeasure
  effortQuantity: IMeasure

  "A textual description or comment."
  note: String
}

type SatisfactionResponse {
  satisfaction: Satisfaction
}

type Query {
  commitment(id: ID): Commitment
  allCommitments(start: ID, limit: Int): [Commitment!]

  intent(id: ID): Intent
  allIntents(start: ID, limit: Int): [Intent!]

  fulfillment(id: ID): Fulfillment
  allFulfillments(start: ID, limit: Int): [Fulfillment!]

  satisfaction(id: ID): Satisfaction
  allSatisfactions(start: ID, limit: Int): [Satisfaction!]
}

type Mutation {
  createCommitment(commitment: CommitmentCreateParams): CommitmentResponse
  updateCommitment(commitment: CommitmentUpdateParams): CommitmentResponse
  deleteCommitment(id: String!): Boolean

  createIntent(intent: IntentCreateParams): IntentResponse
  updateIntent(intent: IntentUpdateParams): IntentResponse
  deleteIntent(id: String!): Boolean

  createFulfillment(fulfillment: FulfillmentCreateParams!): FulfillmentResponse
  updateFulfillment(fulfillment: FulfillmentUpdateParams!): FulfillmentResponse
  deleteFulfillment(id: String!): Boolean

  createSatisfaction(satisfaction: SatisfactionCreateParams): SatisfactionResponse
  updateSatisfaction(satisfaction: SatisfactionUpdateParams): SatisfactionResponse
  deleteSatisfaction(id: String!): Boolean
}
