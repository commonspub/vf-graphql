##
#
# Agent module
#
# All functionality related to the definition of autonomous agents
# (people, organizations, groups) and their relationships.
#
# @package  vf-graphql
# @since    2019-02-11
#
##

"""
A person or group or organization with economic agency.
"""
interface Agent {
  id: ID!

  "An informal or formal textual identifier for an agent. Does not imply uniqueness."
  name: String!

  "The uri to an image relevant to the agent, such as a logo, avatar, photo, etc."
  image: URI

  "A textual description or comment."
  note: String

  ##############################################################################
  # inverse relationships and queries

  relationships(roleId: ID): [AgentRelationship!] # :TODO: category filtering
  relationshipsAsSubject(roleId: ID): [AgentRelationship!] # :TODO: category filtering
  relationshipsAsObject(roleId: ID): [AgentRelationship!] # :TODO: category filtering

  roles: [AgentRelationshipRole!]
}

"""
A natural person.
"""
type Person implements Agent {
  id: ID!

  "The name that this agent will be referred to by."
  name: String!

  "The uri to an image relevant to the agent, such as a logo, avatar, photo, etc."
  image: URI

  "A textual description or comment."
  note: String

  ##############################################################################
  # inverse relationships and queries

  relationships(roleId: ID): [AgentRelationship!] # :TODO: category filtering
  relationshipsAsSubject(roleId: ID): [AgentRelationship!] # :TODO: category filtering
  relationshipsAsObject(roleId: ID): [AgentRelationship!] # :TODO: category filtering

  roles: [AgentRelationshipRole!]
}

"""
A formal or informal group, or legal organization.
"""
type Organization implements Agent {
  id: ID!

  # :TODO: define how people can create further typing of Organization
  # type: OrganizationClassification

  "The name that this agent will be referred to by."
  name: String!

  "The uri to an image relevant to the agent, such as a logo, avatar, photo, etc."
  image: URI

  "A textual description or comment."
  note: String

  ##############################################################################
  # inverse relationships and queries

  relationships(roleId: ID): [AgentRelationship!] # :TODO: category filtering
  relationshipsAsSubject(roleId: ID): [AgentRelationship!] # :TODO: category filtering
  relationshipsAsObject(roleId: ID): [AgentRelationship!] # :TODO: category filtering

  roles: [AgentRelationshipRole!]
}

# Relationships between agents

"""
The role of an economic relationship that exists between 2 agents, such as member, trading partner.
"""
type AgentRelationship {
  id: ID!

  "The subject of a relationship between 2 agents.  For example, if Mary is a member of a group, then Mary is the subject."
  subject: Agent!

  "The object of a relationship between 2 agents.  For example, if Mary is a member of a group, then the group is the object."
  object: Agent!

  "A kind of relationship that exists between 2 agents."
  relationship: AgentRelationshipRole!

  "Grouping around something to create a boundary or context, used for documenting, accounting, planning."
  inScopeOf: [AnyType!]

  "A textual description or comment."
  note: String
}

"""
A relationship role defining the kind of association one agent can have with another.
"""
type AgentRelationshipRole {
  id: ID!

  "The human readable name of the role, from the subject to the object."
  roleLabel: String!

  "The human readable name of the role, from the object to the subject."
  inverseRoleLabel: String

  "A textual description or comment."
  note: String

  # :TODO: https://github.com/valueflows/valueflows/issues/494
}

# :TODO: how do we want to do this concept?
# """
# Generalized behaviors for agent relationship roles
# """
# enum AgentRelationshipCategory {
#   LEGALPARTNER
#   MEMBER
#   PART
#   PEER
#   TRADINGPARTNER
# }





# interface AgentParams {
#   name: String
#   image: URI
#   primaryLocation: String
#   note: String
# }

input AgentCreateParams { # implements AgentParams
  name: String!
  image: URI
  primaryLocation: ID
  note: String
}

input AgentUpdateParams { # implements UpdateParams & AgentParams
  id: ID!
  name: String
  image: URI
  primaryLocation: ID
  note: String
}

type PersonResponse {
  agent: Person!
}

type OrganizationResponse {
  agent: Organization!
}


# interface AgentRelationshipParams {
#   subject: ID
#   object: ID
#   relationship: ID
#   note: String
# }

input AgentRelationshipCreateParams { # implements AgentRelationshipParams
  subject: ID! # Agent
  object: ID! # Agent
  relationship: ID! # AgentRelationshipRole
  note: String
}

input AgentRelationshipUpdateParams { # implements UpdateParams & AgentRelationshipParams
  id: ID!
  subject: ID
  object: ID
  relationship: ID
  note: String
}

type AgentRelationshipResponse {
  agentRelationship: AgentRelationship!
}


# interface AgentRelationshipRoleParams {
#   roleLabel: String
#   inverseRoleLabel: String
#   note: String
# }

input AgentRelationshipRoleCreateParams { # implements AgentRelationshipRoleParams
  roleLabel: String!
  inverseRoleLabel: String
  note: String
}

input AgentRelationshipRoleUpdateParams { # implements UpdateParams & AgentRelationshipRoleParams
  id: ID!
  roleLabel: String
  inverseRoleLabel: String
  note: String
}

type AgentRelationshipRoleResponse {
  agentRelationshipRole: AgentRelationshipRole
}

type Query {
  myAgent: Agent

  agent(id: ID): Agent
  allAgents: [Agent!]

  organization(id: ID): Organization
  allOrganizations: [Organization!]

  person(id: ID): Person
  allPeople: [Person!]

  agentRelationship(id: ID): AgentRelationship
  allAgentRelationships: [AgentRelationship!]
  agentRelationshipRole(id: ID): AgentRelationshipRole
  allAgentRelationshipRoles: [AgentRelationshipRole!]
}

type Mutation {
  createPerson(person: AgentCreateParams!): PersonResponse
  updatePerson(person: AgentUpdateParams!): PersonResponse
  deletePerson(id: String!): Boolean

  createOrganization(organization: AgentCreateParams!): OrganizationResponse
  updateOrganization(organization: AgentUpdateParams!): OrganizationResponse
  deleteOrganization(id: String!): Boolean

  createAgentRelationship(relationship: AgentRelationshipCreateParams!): AgentRelationshipResponse
  updateAgentRelationship(relationship: AgentRelationshipUpdateParams!): AgentRelationshipResponse
  deleteAgentRelationship(id: String!): Boolean

  createAgentRelationshipRole(agentRelationshipRole: AgentRelationshipRoleCreateParams): AgentRelationshipRoleResponse
  updateAgentRelationshipRole(agentRelationshipRole: AgentRelationshipRoleUpdateParams): AgentRelationshipRoleResponse
  deleteAgentRelationshipRole(id: String!): Boolean
}
