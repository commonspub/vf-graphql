##
#
# Measurement module
#
# Typedefs used for defining and representing measurements
# in the real (physical) world.
#
# @package  vf-graphql
# @since    2019-02-11
#
##

"""
Defines the unit of time measured in a temporal `Duration`.
"""
enum TimeUnit {
  year, month, week, day, hour, minute, second
}

"""
A `Duration` represents an interval between two `DateTime` values.
"""
type Duration {
  numericDuration: Float!
  unitType: TimeUnit!
}

"""
Defines a unit of measurement, along with its display symbol.
From OM2 vocabulary.
"""
type Unit {
  id: ID!
  label: String!
  symbol: String!
}

"""
Semantic meaning for measurements: binds a quantity to its measurement unit.
See http://www.qudt.org/pages/QUDToverviewPage.html
"""
type Measure {
  hasNumericalValue: Float!
  hasUnit: Unit
}

"""
Mutation input structure for defining measurements. Should be nulled if not present, rather than empty.
"""
input IMeasure {
  hasNumericalValue: Float!
  hasUnit: ID # Unit
}

"""
Mutation input structure for defining time durations.
"""
input IDuration {
  numericDuration: Float!
  unitType: TimeUnit!
}






# interface UnitParams {
#   label: String
#   symbol: String
# }

input UnitCreateParams { # implements UnitParams
  label: String!
  symbol: String!
}

input UnitUpdateParams { # implements UpdateParams & UnitParams
  id: ID!
  label: String
  symbol: String
}

type UnitResponse {
  unit: Unit
}

type Query {
  unit(id: ID): Unit
  allUnits: [Unit!]
}

type Mutation {
  createUnit(unit: UnitCreateParams): UnitResponse
  updateUnit(unit: UnitUpdateParams): UnitResponse
  deleteUnit(id: String!): Boolean
}
